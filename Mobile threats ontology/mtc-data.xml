<?xml version="1.0" encoding="UTF-8" ?>
<root>
    
    
    <row>
        <ThreatID>APP-0</ThreatID>
        <ThreatCategory>Vulnerable Applications</ThreatCategory>
        <Threat>Eavesdropping on Unencryted App Traffic</Threat>
        
        
        <ExploitExamples>Remote Code Execution as System User on Samsung Phones [^55]</ExploitExamples>
        <ExploitExamples>Insecurity Cameras and Mobile Apps: Surveillance or Exposure? [^56]</ExploitExamples>
        <ExploitExamples>Team Joch vs. Android [^57]</ExploitExamples>
        <ExploitExamples>CBS App &amp; Mobility Website [^116]</ExploitExamples>
        <ExploitExamples>The Fork [^117]</ExploitExamples>
        <ExploitExamples>Card Crypt [^121]</ExploitExamples>
        
        <CVEExamples>CVE-2015-4640</CVEExamples>
        <CVEExamples>CVE-2017-2412</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To use HTTPS for web servers that support both HTTP and HTTPS, prepend URLs entered into the browser location bar with 'https://'.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>Implement secure communications in apps. On iOS, use the App Transport Security feature. On Android, opt out of the use of Cleartext traffic.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use app vetting tools/services that can detect the use of cleartext traffic in mobile apps before deployment within your organization.</Countermeasure>
            <Countermeasure>To protect the confidentiality of enterprise data against passive interception, particularly when mobile devices may be connected to public networks (e.g. coffee shop Wi-Fi), deploy mobile VPN technologies to encapsulate potentially clear-text network traffic with a layer of strong encryption.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-1</ThreatID>
        <ThreatCategory>Vulnerable Applications</ThreatCategory>
        <Threat>Man-in-the-middle Attack on Server Authentication</Threat>
        
        <ThreatOrigins>Mobile Threat Protection: A Holistic Approach to Securing Mobile Data and Devices [^61]</ThreatOrigins>
        
        <ExploitExamples>Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security [^62]</ExploitExamples>
        <ExploitExamples>SMV-HUNTER: Large Scale, Automated Detection of SSL/TLS Man-in-the-Middle Vulnerabilities in Android Apps [^63]</ExploitExamples>
        <ExploitExamples>How We Discovered Thousands of Vulnerable Android Apps in One Day [^65]</ExploitExamples>
        
        <CVEExamples>CVE-2016-3664</CVEExamples>
        <CVEExamples>CVE-2014-5618</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>Use fail-safe logic when establishing a connection to the back-end server; if server certificate validation fails, do not continue to negotiate a secure session or fall back to an unencrypted communication protocol, and warn the app user.</Countermeasure>
            <Countermeasure>On Android devices, use the Android Network Security Policy feature, Certificate Pinning.</Countermeasure>
            <Countermeasure>To reduce the impact of a successful MiTM attack on your application, consider the use of public key cryptography to protect sensitive data destined for back-end servers prior to transmission off the device.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>App vetting tools/services or pen testing to detect MiTM vulnerabilities in mobile apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-10</ThreatID>
        <ThreatCategory>Vulnerable Applications</ThreatCategory>
        <Threat>Poorly Implemented Cryptography</Threat>
        
        <ThreatOrigins>OWASP Mobile Top 10 2016 [^9]</ThreatOrigins>
        
        <ExploitExamples>FortiClient Multiple Vulnerabilities [^82]</ExploitExamples>
        
        <CVEExamples>CVE-2017-4896 [^AirWatch-1]</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>Strictly avoid the use of hard-coded cryptographic keys in application source code.</Countermeasure>
            <Countermeasure>Explicitly overwrite variables containing cryptographic keys or other secrets following each use to prevent unauthorized disclosure of the secret if that memory location is subsequently accessed by untrusted code.</Countermeasure>
            <Countermeasure>Use each cryptographic key for a single purpose to limit the impact of key compromise.</Countermeasure>
            <Countermeasure>Strictly avoid the use of 'broken', weak, or novel algorithms (those that have not undergone extensive evaluation by the cryptographic community at large) to protect long-term secrets.</Countermeasure>
            <Countermeasure>Consider the use of cryptographic functions provided by the mobile operating system and where possible, leverage hardware-backed cryptographic and secure storage services.</Countermeasure>
            <Countermeasure>Additionally, application developers are strongly encouraged to familiarize themselves with best practices for cryptography and general key management, and to integrate that knowledge early in the application design process. See NIST SP 800-57 Part 1 Revision 4, Recommendation for Key Management, Part 1 General[^244]</Countermeasure>
            <Countermeasure>For Android developers, review guidance on the proper use of the Android Keystore System.[^245]</Countermeasure>
            <Countermeasure>For iOS developers, review guidance on the proper use of the iOS Keychain.[^246]</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use app vetting tools/services to detect the misuse of cryptography in mobile apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-11</ThreatID>
        <ThreatCategory>Vulnerable Applications</ThreatCategory>
        <Threat>Untrusted Input to Sensitive Operations</Threat>
        
        
        <ExploitExamples>Team Joch vs. Android [^57]</ExploitExamples>
        
        <CVEExamples>CVE-2017-7005</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>When input should match one of a set of known and comparable options, use whitelisting to ensure the input is safe before applying it to security logic.</Countermeasure>
            <Countermeasure>When whitelisting is not possible, use vetted data sanitization libraries to verify the input appears syntactically safe prior to applying it to security logic.</Countermeasure>
            <Countermeasure>Always use fail-safe security logic in apps; if input cannot be verified to be safe (versus not identified as unsafe), reject the input and do not perform the security action.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-12</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Malicious Device Information Gathering</Threat>
        
        <ThreatOrigins>The Google Android Security Team's Classifications for Potentially Harmful Applications [^83]</ThreatOrigins>
        
        <ExploitExamples>Slembunk: An Evolving Android Trojan Family [^84]</ExploitExamples>
        <ExploitExamples>An investigation of Chrysaor Malware on Android [^AndroidDevBlog-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the sideloading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Perform application vetting to identify inappropriate behaviors by apps including permission requests made by the apps</Countermeasure>
            <Countermeasure>Use application threat intelligence data about potential data collection risks associated with apps installed on devices</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify apps that may abuse permissions to perform data collection.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-13</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Sensitive Information Discovery via OS APIs</Threat>
        
        <ThreatOrigins>The Google Android Security Team's Classifications for Potentially Harmful Applications [^83]</ThreatOrigins>
        
        <ExploitExamples>An investigation of Chrysaor Malware on Android [^AndroidDevBlog-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the sideloading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Perform application vetting to identify privacy-invasive behaviors by apps.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about potential privacy risks associated with apps installed on devices</Countermeasure>
            <Countermeasure>Use features such as Apple iOS Managed Apps, Android for Work, or Samsung KNOX Workspace that provide additional separation between personal apps and enterprise apps to mitigate the leakage of private information between work/personal contexts.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify apps that may violate privacy.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>Only request access to the minimal set of shared data stores (e.g., contacts, calendar), OS services (e.g. location services), and device sensors (e.g. camera, microphone) necessary for the app to provide functionality.</Countermeasure>
            <Countermeasure>Only collect the minimal set of device or user data necessary for the app to provide functionality.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-14</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Masquerade as Legitimate Application</Threat>
        
        <ThreatOrigins>The Google Android Security Team's Classifications for Potentially Harmful Applications [^83]</ThreatOrigins>
        <ThreatOrigins>Mobile Threat Protection: A Holistic Approach to Securing Mobile Data and Devices [^61]</ThreatOrigins>
        <ThreatOrigins>Dissecting Android Malware: Characterization and Evolution [^85]</ThreatOrigins>
        
        <ExploitExamples>New Android Malware Family Evades Antivirus Detection by Using Popular Ad Libraries [^86]</ExploitExamples>
        <ExploitExamples>Slembunk: An Evolving Android Trojan Family Targeting Users of Worldwide Banking Apps [^84]</ExploitExamples>
        <ExploitExamples>Incident Response for Android and iOS [^87]</ExploitExamples>
        <ExploitExamples>Cloned banking app stealing usernames sneaks into Google Play [^88]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the sideloading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about potentially harmful apps installed on COPE or BYOD devices</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify potentially harmful apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To reduce the ease of an attacker to abuse existing app functionality, only request access to the minimal set of shared data stores (e.g., contacts, calendar), OS services (e.g. location services), and device sensors (e.g. camera, microphone) necessary for the app to provide functionality.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-15</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Distribution of malicious apps by a 3rd party store</Threat>
        
        <ThreatOrigins>Change to sideloading apps in iOS 9 is a security win [^89]</ThreatOrigins>
        <ThreatOrigins>Mobile Security: Threats and Countermeasures [^90]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Actor>
            <Countermeasure>Enterprise</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Actor>
            <Countermeasure>Enterprise</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Ensure iOS devices are running the latest version of iOS, as iOS 9 introduces improvements to make it more difficult for users to inadvertently install non-Apple App Store apps (e.g. apps distributed using illicitly obtained enterprise certificates).</Actor>
            <Countermeasure>Mobile Device User</Countermeasure>
            <Countermeasure>Enterprise</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>When the installation of apps from unofficial app stores (e.g., enterprise app stores) is necessary, use Android Verify Apps feature to identify potentially harmful apps.</Actor>
            <Countermeasure>Mobile Device User</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>To protect against arbitrary installation of 3rd party apps, when the installation of apps from unofficial app stores (e.g., enterprise app stores) is necessary, disable the installation of 3rd party apps once installation is complete.</Actor>
            <Countermeasure>Mobile Device User</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-16</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Premium SMS Fraud</Threat>
        
        <ThreatOrigins>Dissecting Android Malware: Characterization and Evolution [^85]</ThreatOrigins>
        
        <ExploitExamples>zSone, RogueSPPush, GGTracker malware described in Dissecting Android Malware: Characterization and Evolution [^85]</ExploitExamples>
        <ExploitExamples>Mkero: Android malware secretly subscribes victims to premium SMS services [^94]</ExploitExamples>
        <ExploitExamples>Chinese Android botnet 'netting millions' [^95]</ExploitExamples>
        <ExploitExamples>Android Security 2015 Year In Review [^98]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Ensure Android devices are running a recent version of Android, as starting in Android 4.2, user confirmation is needed before apps can send premium SMSs (source: https://source.android.com/security/enhancements/enhancements42.html).</Countermeasure>
            <Countermeasure>Perform application vetting to identify SMS fraud by apps including permission requests made by the apps.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about potential SMS fraud risks associated with apps installed on devices.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Ensure Android devices are running a recent version of Android, as starting in Android 4.2, user confirmation is needed before apps can send premium SMSs (source: https://source.android.com/security/enhancements/enhancements42.html).</Countermeasure>
            <Countermeasure>Use Android Verify Apps feature to apps that attempt to abuse SMS functionality.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-17</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Intercepting SMS Messages</Threat>
        
        <ThreatOrigins>Dissecting Android Malware: Characterization and Evolution [^85]</ThreatOrigins>
        
        <ExploitExamples>New Android Trojan xBot Phishes Credit Cards and Bank Accounts, Encrypts Devices for Ransom [^96]</ExploitExamples>
        <ExploitExamples>How Anywhere Computing Just Killed Your Phone-Based Two-Factor Authentication [^97]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Perform application vetting to identify inappropriate behaviors by apps including interception of SMS messages.</Countermeasure>
            <Countermeasure>Avoid the use of applications that rely on SMS messages for 2-factor authentication.</Countermeasure>
            <Countermeasure>When stronger 2-factor authentication methods are available, such as FIDO U2F tokens, educate enterprise users to avoid the use of SMS messages for configuring 2-factor authentication for enterprise applications.</Countermeasure>
            <Countermeasure>Use application threat intelligence data to identify apps that increase risks associated with SMS message interception.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify apps that may intercept SMS messages.</Countermeasure>
            <Countermeasure>Avoid the use of applications that rely on SMS messages for 2-factor authentication.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>Avoid the use of SMS messages for 2-factor authentication.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-18</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Premium Service Fraud</Threat>
        
        <ThreatOrigins>Android Security 2015 Year In Review [^98]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about potential abuse of carrier services associated with apps installed on COPE or BYOD devices</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify apps that may abuse premium carrier services.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-19</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Audio or Video Surveillance</Threat>
        
        
        <ExploitExamples>Malware designed to take over cameras and record audio enters Google Play [^99]</ExploitExamples>
        <ExploitExamples>An investigation of Chrysaor Malware on Android [^AndroidDevBlog-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Deploy MDM solutions that support geo-fencing of BYOD devices with policies that disable device sensors (e.g., camera, microphone) when the device is being operated in sensitive locations.</Countermeasure>
            <Countermeasure>Deploy MDM solutions for COPE devices that support disabling device sensors (e.g. camera, microphone) that can be used for recording of nearby activity.</Countermeasure>
            <Countermeasure>Deploy MAM solutions for COPE devices that support selectively enabling device sensors (e.g. camera, microphone) for a whitelist of trusted enterprise applications that require those functionalities.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about potential abuse of access to device sensors associated with apps installed on COPE or BYOD devices</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify apps that may abuse access to sensor data to record nearby activity.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To reduce risks of using the app, only request access to the minimal set of shared data stores (e.g., contacts, calendar), OS services (e.g. location services), and device sensors (e.g. camera, microphone) necessary for the app to provide functionality.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-2</ThreatID>
        <ThreatCategory>Vulnerable Applications</ThreatCategory>
        <Threat>Sensitive Information Exposure</Threat>
        
        
        <ExploitExamples>Vulnerability in Skype for Android [^67]</ExploitExamples>
        <ExploitExamples>World Writable Code Is Bad, MMMMKAY [^68]</ExploitExamples>
        <ExploitExamples>LOOK-11-001 something [^69]</ExploitExamples>
        
        <CVEExamples>CVE-2011-1717</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use app-vetting tools or services to identify insecure storage of sensitive data.</Countermeasure>
            <Countermeasure>Consider the use of devices that support Android 7.0 and later, which enables app-level encryption in addition to block-level encryption.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Consider the use of devices that support Android 7.0 and later, which enables app-level encryption in addition to block-level encryption.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-20</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Loading Malicious Code at Runtime</Threat>
        
        <ThreatOrigins>Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications [^240]</ThreatOrigins>
        <ThreatOrigins>Jekyll on iOS: When Benign Apps Become Evil [^111]</ThreatOrigins>
        
        <ExploitExamples>Android Hax [^100]</ExploitExamples>
        <ExploitExamples>Hot or Not? The Benefits and Risks of iOS Remote Hot Patching [^241]</ExploitExamples>
        <ExploitExamples>Method Swizzling [^242]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about potential abuse of dynamic code execution associated with apps installed on COPE or BYOD devices</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify potentially harmful apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-21</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>App Vetting Misses Malicious App</Threat>
        
        <ThreatOrigins>Dissecting Android Malware: Characterization and Evolution [^85]</ThreatOrigins>
        
        
        <CVEExamples>CVE-2015-07555</CVEExamples>
        <CVEExamples>CVE-2016-5131</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify untrusted apps that contain encrypted or obfuscated code.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about apps that contain encrypted or obfuscated code</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify potentially harmful apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To mitigate your app being detected as potentially malicious, do not arbitrarily encrypt or obfuscate code.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-22</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Avoiding Uninstallation via Permissions Abuse</Threat>
        
        <ThreatOrigins>Android Security 2015 Year In Review [^98]</ThreatOrigins>
        
        
        <CVEExamples>CVE-2017-0594</CVEExamples>
        <CVEExamples>CVE-2017-0595</CVEExamples>
        <CVEExamples>CVE-2017-0596</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Ensure Android devices are running a recent version of the operating system. As described at 44:20 in the Google I/O 2016 &quot;What's new in Android security&quot; (https://www.youtube.com/watch?v=XZzLjllizYs), enhancements were made in Android M or N to ensure that all device admin apps can be uninstalled.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Ensure Android devices are running a recent version of the operating system. As described at 44:20 in the Google I/O 2016 &quot;What's new in Android security&quot; (https://www.youtube.com/watch?v=XZzLjllizYs), enhancements were made in Android M or N to ensure that all device admin apps can be uninstalled.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-23</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Ransoming Assets via Device Management Abuse</Threat>
        
        <ThreatOrigins>Android Security 2015 Year In Review [^98]</ThreatOrigins>
        
        <ExploitExamples>New Android Trojan xBot Phishes Credit Cards and Bank Accounts, Encrypts Devices for Ransom [^96]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about potential abuse of Administrator privileges associated with apps installed on COPE or BYOD devices</Countermeasure>
            <Countermeasure>Consider the use of devices that support Android 7.0 and later and ensuring a PIN is set. Starting in 7.0, device administrator apps can no longer change the device PIN/password when one is already set, as described in https://developer.android.com/preview/behavior-changes.html and at 44:20 of https://www.youtube.com/watch?v=XZzLjllizYs</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify apps that may abuse Administrator privileges.</Countermeasure>
            <Countermeasure>Consider the use of devices that support Android 7.0 and later and ensuring a PIN is set. Starting in 7.0, device administrator apps can no longer change the device PIN/password when one is already set, as described in https://developer.android.com/preview/behavior-changes.html and at 44:20 of https://www.youtube.com/watch?v=XZzLjllizYs</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-24</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Covertly Track Device Location</Threat>
        
        <ThreatOrigins>Dissecting Android Malware: Characterization and Evolution [^85]</ThreatOrigins>
        
        <ExploitExamples>An investigation of Chrysaor Malware on Android [^AndroidDevBlog-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about potential abuse of location services associated with apps installed on COPE or BYOD devices</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify apps that may abuse location services.</Countermeasure>
            <Countermeasure>When apps that require location services (e.g., map services) are not in use, use OS-provided settings to globally disable access to location services</Countermeasure>
            <Countermeasure>When using untrusted apps that require locations services (e.g., map services), use OS-provided settings to revoke access to location services once the app is no longer in use.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-25</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Abusing Existing Root Access</Threat>
        
        
        <ExploitExamples>How to clean up the Duh iPhone worm [^101]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>For the lowest risk tolerance, deploy MDM or containerization solutions with policies that can detect and block access to enterprise resources by rooted/jail-broken devices.</Countermeasure>
            <Countermeasure>Use application threat intelligence data to detect potential abuse of rooted/jail-broken BYOD devices</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify harmful apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To avoid launching applications that handle sensitive information on a rooted/jail-broken device, perform device integrity checking, such as using Android SafetyNet, Samsung Knox hardware-backed remote attestation, or other applicable remote attestation technologies device integrity attestation API</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-26</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Privilage Escalation via OS Vulnerability</Threat>
        
        <ThreatOrigins>Dissecting Android Malware: Characterization and Evolution [^85]</ThreatOrigins>
        
        
        <CVEExamples>CVE-2017-2398</CVEExamples>
        <CVEExamples>CVE-2017-2401</CVEExamples>
        <CVEExamples>CVE-2017-2440</CVEExamples>
        <CVEExamples>CVE-2017-2451</CVEExamples>
        <CVEExamples>CVE-2017-2456</CVEExamples>
        <CVEExamples>CVE-2017-2472</CVEExamples>
        <CVEExamples>CVE-2017-2473</CVEExamples>
        <CVEExamples>CVE-2017-2474</CVEExamples>
        <CVEExamples>CVE-2017-2478</CVEExamples>
        <CVEExamples>CVE-2017-2482</CVEExamples>
        <CVEExamples>CVE-2017-2483</CVEExamples>
        <CVEExamples>CVE-2017-2490</CVEExamples>
        <CVEExamples>CVE-2017-0593</CVEExamples>
        <CVEExamples>CVE-2017-0598</CVEExamples>
        <CVEExamples>CVE-2017-0601</CVEExamples>
        <CVEExamples>CVE-2016-7056</CVEExamples>
        <CVEExamples>CVE-2016-10274</CVEExamples>
        <CVEExamples>CVE-2016-10275</CVEExamples>
        <CVEExamples>CVE-2016-10276</CVEExamples>
        <CVEExamples>CVE-2016-9794</CVEExamples>
        <CVEExamples>CVE-2017-0331</CVEExamples>
        <CVEExamples>CVE-2017-0604</CVEExamples>
        <CVEExamples>CVE-2017-0605</CVEExamples>
        <CVEExamples>CVE-2016-10280</CVEExamples>
        <CVEExamples>CVE-2016-10281</CVEExamples>
        <CVEExamples>CVE-2016-10282</CVEExamples>
        <CVEExamples>CVE-2016-10283</CVEExamples>
        <CVEExamples>CVE-2016-10284</CVEExamples>
        <CVEExamples>CVE-2016-10285</CVEExamples>
        <CVEExamples>CVE-2016-10286</CVEExamples>
        <CVEExamples>CVE-2015-9004</CVEExamples>
        <CVEExamples>CVE-2016-10287</CVEExamples>
        <CVEExamples>CVE-2017-0606</CVEExamples>
        <CVEExamples>CVE-2016-5860</CVEExamples>
        <CVEExamples>CVE-2016-5867</CVEExamples>
        <CVEExamples>CVE-2017-0607</CVEExamples>
        <CVEExamples>CVE-2017-0608</CVEExamples>
        <CVEExamples>CVE-2017-0609</CVEExamples>
        <CVEExamples>CVE-2016-5859</CVEExamples>
        <CVEExamples>CVE-2017-0610</CVEExamples>
        <CVEExamples>CVE-2017-0611</CVEExamples>
        <CVEExamples>CVE-2016-5853</CVEExamples>
        <CVEExamples>CVE-2016-10288</CVEExamples>
        <CVEExamples>CVE-2016-10289</CVEExamples>
        <CVEExamples>CVE-2016-10290</CVEExamples>
        <CVEExamples>CVE-2017-0465</CVEExamples>
        <CVEExamples>CVE-2017-0612</CVEExamples>
        <CVEExamples>CVE-2017-0613</CVEExamples>
        <CVEExamples>CVE-2017-0614</CVEExamples>
        <CVEExamples>CVE-2017-0616</CVEExamples>
        <CVEExamples>CVE-2017-0618</CVEExamples>
        <CVEExamples>CVE-2017-0619</CVEExamples>
        <CVEExamples>CVE-2017-0620</CVEExamples>
        <CVEExamples>CVE-2016-5862</CVEExamples>
        <CVEExamples>CVE-2017-0621</CVEExamples>
        <CVEExamples>CVE-2016-5868</CVEExamples>
        <CVEExamples>CVE-2017-0622</CVEExamples>
        <CVEExamples>CVE-2017-0623</CVEExamples>
        <CVEExamples>CVE-2017-0624</CVEExamples>
        <CVEExamples>CVE-2017-0625</CVEExamples>
        <CVEExamples>CVE-2017-0626</CVEExamples>
        <CVEExamples>CVE-2017-0627</CVEExamples>
        <CVEExamples>CVE-2016-10293</CVEExamples>
        <CVEExamples>CVE-2016-10294</CVEExamples>
        <CVEExamples>CVE-2016-10295</CVEExamples>
        <CVEExamples>CVE-2016-10296</CVEExamples>
        <CVEExamples>CVE-2017-0628</CVEExamples>
        <CVEExamples>CVE-2017-0629</CVEExamples>
        <CVEExamples>CVE-2017-0630</CVEExamples>
        <CVEExamples>CVE-2016-5858</CVEExamples>
        <CVEExamples>CVE-2017-0631</CVEExamples>
        <CVEExamples>CVE-2016-5347</CVEExamples>
        <CVEExamples>CVE-2016-5854</CVEExamples>
        <CVEExamples>CVE-2016-5855</CVEExamples>
        <CVEExamples>CVE-2017-0632</CVEExamples>
        <CVEExamples>CVE-2017-0633</CVEExamples>
        <CVEExamples>CVE-2017-0634</CVEExamples>
        <CVEExamples>CVE-2017-2522</CVEExamples>
        <CVEExamples>CVE-2017-2523</CVEExamples>
        <CVEExamples>CVE-2017-2497</CVEExamples>
        <CVEExamples>CVE-2017-6981</CVEExamples>
        <CVEExamples>CVE-2017-6979</CVEExamples>
        <CVEExamples>CVE-2017-2051</CVEExamples>
        <CVEExamples>CVE-2017-2507</CVEExamples>
        <CVEExamples>CVE-2017-6987</CVEExamples>
        <CVEExamples>CVE-2017-7004</CVEExamples>
        <CVEExamples>CVE-2017-2513</CVEExamples>
        <CVEExamples>CVE-2017-2518</CVEExamples>
        <CVEExamples>CVE-2017-2520</CVEExamples>
        <CVEExamples>CVE-2017-2519</CVEExamples>
        <CVEExamples>CVE-2017-6983</CVEExamples>
        <CVEExamples>CVE-2017-6991</CVEExamples>
        <CVEExamples>CVE-2017-7000</CVEExamples>
        <CVEExamples>CVE-2017-7001</CVEExamples>
        <CVEExamples>CVE-2017-7002</CVEExamples>
        <CVEExamples>CVE-2017-2524</CVEExamples>
        <CVEExamples>CVE-2017-2496</CVEExamples>
        <CVEExamples>CVE-2017-2505</CVEExamples>
        <CVEExamples>CVE-2017-2506</CVEExamples>
        <CVEExamples>CVE-2017-2514</CVEExamples>
        <CVEExamples>CVE-2017-2515</CVEExamples>
        <CVEExamples>CVE-2017-2521</CVEExamples>
        <CVEExamples>CVE-2017-2525</CVEExamples>
        <CVEExamples>CVE-2017-2526</CVEExamples>
        <CVEExamples>CVE-2017-2530</CVEExamples>
        <CVEExamples>CVE-2017-2531</CVEExamples>
        <CVEExamples>CVE-2017-2538</CVEExamples>
        <CVEExamples>CVE-2017-2539</CVEExamples>
        <CVEExamples>CVE-2017-2544</CVEExamples>
        <CVEExamples>CVE-2017-2547</CVEExamples>
        <CVEExamples>CVE-2017-6980</CVEExamples>
        <CVEExamples>CVE-2017-6984</CVEExamples>
        <CVEExamples>CVE-2017-2504</CVEExamples>
        <CVEExamples>CVE-2017-2508</CVEExamples>
        <CVEExamples>CVE-2017-2510</CVEExamples>
        <CVEExamples>CVE-2017-2528</CVEExamples>
        <CVEExamples>CVE-2017-2536</CVEExamples>
        <CVEExamples>CVE-2017-2549</CVEExamples>
        <CVEExamples>CVE-2017-2499</CVEExamples>
        <CVEExamples>CVE-2016-7056</CVEExamples>
        <CVEExamples>CVE-2017-0603</CVEExamples>
        <CVEExamples>CVE-2016-10294</CVEExamples>
        <CVEExamples>CVE-2017-0615</CVEExamples>
        <CVEExamples>CVE-2017-0617</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use application threat intelligence data to identify apps that exploit the OS to achieve privilege escalation.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify apps that exploit the OS to achieve privilege escalation.</Countermeasure>
            <Countermeasure>To limit the opportunity for malicious apps to exploit known vulnerabilities, ensure timely installation of security updates.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use the Android Verify Apps feature to identify potentially harmful apps.</Countermeasure>
            <Countermeasure>To limit the opportunity for malicious apps to exploit known vulnerabilities, ensure timely installation of security updates.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-27</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Persistance via Writing to System Partition</Threat>
        
        
        <ExploitExamples>Brain Test re-emerges: 13 apps found in Google Play [^102]</ExploitExamples>
        
        <CVEExamples>CVE-2016-10277</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about apps that may achieve malicious persistence</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify apps that exploit the underlying OS to achieve malicious persistence.</Countermeasure>
            <Countermeasure>Deploy MDM solutions that require successful boot attestation prior to granting access to enterprise resources.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify potentially harmful apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To avoid executing apps that process sensitve information while low-level malware is present on the device, perform device integrity checking within enterprise applications, such as use of Android SafetyNet, Samsung Knox hardware-backed remote attestation, or other applicable remote attestation technologies device integrity attestation API</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-28</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Encrypting and Ransoming Files</Threat>
        
        
        <ExploitExamples>New Android Trojan xBot Phishes Credit Cards and Bank Accounts, Encrypts Devices for Ransom [^96]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about apps that maliciously encrypt user data.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify apps that maliciously encrypt user data.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify potentially harmful apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-29</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Command-and-control Traffic Evades Analysis</Threat>
        
        
        <ExploitExamples>Mobile Malware Evolution: 2013 [^103]</ExploitExamples>
        <ExploitExamples>DroydSeuss: A Mobile Banking Trojan Tracker [^104]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify remote access control apps that receive commands over notification or messaging serices or other communication channels.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Disable access to notification or messaing services to apps for which such functions are not actually used.</Countermeasure>
            <Countermeasure>Use Verify Apps feature to identify potentially harmful apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-3</ThreatID>
        <ThreatCategory>Vulnerable Applications</ThreatCategory>
        <Threat>Sensitive Information in System Logs</Threat>
        
        
        
        <CVEExamples>CVE-2012-2630</CVEExamples>
        <CVEExamples>CVE-2014-0647</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>Avoid logging sensitive data in an unencrypted state, even to files internal to the app, as these files may be exposed in backups or direct access to the device's file system.</Countermeasure>
            <Countermeasure>Use the Compatibility Test Suite, which checks for the presence of potentially sensitive information in the system logs; See https://source.android.com/security/overview/implement.html.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Consider the use of devices that support Android 4.1 or later, in which apps can no longer access the system log (other than reading log entries added by the app itself).</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify apps that store sensitive information in system logs or other unsecure storage locations.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Consider the use of devices that support Android 4.1 or later, in which apps can no longer access the system log (other than reading log entries added by the app itself).</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-30</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Exfiltration Evades Analysis</Threat>
        
        <ThreatOrigins>Dissecting Android Malware: Characterization and Evolution [^85]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about potential data exfiltration risks associated with apps installed on COPE or BYOD devices</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify apps that appear to exfiltrate data.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify apps that may abuse communication channels to exfiltrate data.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-31</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Masquerading as a Legitimate Application</Threat>
        
        <ThreatOrigins>Phishing on Mobile Devices [^105]</ThreatOrigins>
        <ThreatOrigins>Exploiting Androids for Fun and Profit [^106]</ThreatOrigins>
        <ThreatOrigins>The Latest Android Overlay Malware Spreading via SMS Phishing in Europe [^107]</ThreatOrigins>
        <ThreatOrigins>Password-Stealing Instagram App [^108]</ThreatOrigins>
        <ThreatOrigins>Hackers Sneak Malware Into Apple App Store 'To Steal iCloud Passwords' [^109]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Consider the use of devices that support Android 5.0 and later, in which ActivityManager.getRunningTasks() has been modified to stop leaking information about the current foreground activity, increasing the difficulty of malicious apps being able to perform a user interface spoofing attack</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify apps that attempt to spoof the interface to other apps or common web sites, such as banking sites.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Consider the use of devices that support Android 5.0 and later, in which ActivityManager.getRunningTasks() has been modified to stop leaking information about the current foreground activity, increasing the difficulty of malicious apps being able to perform a user interface spoofing attack</Countermeasure>
            <Countermeasure>Use Android Verify Apps feature to identify potentially harmful apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-32</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Exploiting Access to Enterprise Resources</Threat>
        
        
        <ExploitExamples>Juniper Networks Third Annual Mobile Threats Report [^236]</ExploitExamples>
        
        <CVEExamples>CVE-2016-10292</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify apps that perform host discovery or attempt to access hosts with internal (e.g. inside a private LAN) domains or IP addresses.</Countermeasure>
            <Countermeasure>Use features such as Apple iOS Managed Apps, Android for Work, or Samsung KNOX Workspace that provide some level of separation between personal apps and enterprise apps to mitigate the impact of malicious behaviors, including use of per-app/per-user VPN features, so that only enterprise-approved apps can traverse the VPN and access enterprise resources.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify potentially harmful.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-33</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Bypassing OS Private API Controls</Threat>
        
        <ThreatOrigins>Symantec Internet Security Threat Report 2016 [^110]</ThreatOrigins>
        
        <ExploitExamples>YiSpecter: First iOS Malware That Attacks Non-jailbroken Apple iOS Devices by Abusing Private APIs [^43]</ExploitExamples>
        <ExploitExamples>Jekyll on iOS: When Benign Apps Become Evil [^111]</ExploitExamples>
        
        <CVEExamples>CVE-2017-0598</CVEExamples>
        <CVEExamples>CVE-2017-0602</CVEExamples>
        <CVEExamples>CVE-2017-7003</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use application threat intelligence data about potential data collection risks associated with apps installed on COPE or BYOD devices</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify apps that appear to abuse the OS API to gather sensitive data.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify apps that appear to abuse the OS API to gather sensitive data.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To avoid inadvertent detection as a harmful app, review current developer documentation for the supporting OS and always use the recommended API calls to deliver app functionality.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-34</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>App Provides Remote Control Over Device</Threat>
        
        
        <ExploitExamples>Dendroid malware can take over your camera, record audio, and sneak into Google Play [^237]</ExploitExamples>
        <ExploitExamples>Mobile RAT attack makes Android the ultimate spy tool [^112]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify apps that appear to provide remote control to an attacker.</Countermeasure>
            <Countermeasure>Use application threat intelligence services to identify apps flagged as providing remote access to an attacker</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify potentially harmful apps.</Countermeasure>
            <Countermeasure>When installing apps, be suspicious of those requesting access to OS services or sensors that do not appear related to the functionality of the app</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-35</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Retrieving Sensitive Information from Clipboard</Threat>
        
        <ThreatOrigins>Attacks on Android Clipboard [^238]</ThreatOrigins>
        
        <ExploitExamples>Update: XcodeGhost Attacker Can Phish Passwords and Open URLs Through Infected Apps [^239]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Deploy MAM solutions that can restrict access to the device clipboard and similar OS-provided services to a whitelist of trusted apps.</Countermeasure>
            <Countermeasure>Deploy MAM or container solutions that can restrict communication between trusted and untrusted apps using the device clipboard, copy-and-paste, and similar OS-provided services.</Countermeasure>
            <Countermeasure>Use application threat intelligence services to identify apps reported to abuse access to the device clipboard or similar OS-provided services to obtain sensitive information.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify applications that appear to abuse access to the device clipboard or similar OS-provided services to obtain sensitive information.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use Android Verify Apps feature to identify potentially harmful apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-36</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Pre-Installed Apps Invading Privacy</Threat>
        
        
        <ExploitExamples>Device Squad: The story behind the FTC's first case against a mobile device maker [^113]</ExploitExamples>
        <ExploitExamples>Certifi-gate: Hundreds of Millions of Android Devices Could Be Pwned [^114]</ExploitExamples>
        <ExploitExamples>Samsung Keyboard Security Risk Disclosed [^115]</ExploitExamples>
        
        <CVEExamples>CVE-2015-4640</CVEExamples>
        <CVEExamples>CVE-2015-4641</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To mitigate the potential for abuse or exploits by pre-installed apps, ensure that devices have the latest security updates installed.</Countermeasure>
            <Countermeasure>Uninstall pre-installed apps that are not in use.</Countermeasure>
            <Countermeasure>For pre-installed apps that cannot be uninstalled, revoke access to device sensors and OS-provided services.</Countermeasure>
            <Countermeasure>For pre-installed apps that cannot be uninstalled, disable the app so that it cannot be launched.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To mitigate the potential for abuse or exploits by pre-installed apps, ensure that devices have the latest security updates installed.</Countermeasure>
            <Countermeasure>Deploy MAM solutions to identify and block access to devices running high-risk pre-installed apps.</Countermeasure>
            <Countermeasure>Deploy MAM or container solutions to provide additional separation between trusted and untrusted pre-installed apps to mitigate the potential for pre-installed apps to violate the privacy of user actions performed within trusted apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-37</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Unknowingly Performing Hidden Actions in Other Apps</Threat>
        
        <ThreatOrigins>&quot;Accessibility Clickjacking&quot; - The Next Evolution in Android Malware that Impacts More Than 500 Million Devices [^YAmit1]</ThreatOrigins>
        <ThreatOrigins>Android ransomware variant uses clickjacking to become device administrator [^M-Zhang-1]</ThreatOrigins>
        
        <ExploitExamples>Android.Lockdown.E [^Symantec-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To detect if an unauthorized app has access to restricted functionality, such as Device Administrator or Accessibility Services, use device settings to review permissions and identify any app for which that functionality is not authorized.</Countermeasure>
            <Countermeasure>On Android 6.0 and later, use device settings to revoke access to unauthorized services, such as Device Administrator or Accessibility Services. On earlier versions, permissions cannot be individually revoked; instead, the app must be uninstalled.</Countermeasure>
            <Countermeasure>To prevent this attack, use Android 5.0 and later devices, which does not allow apps to appear above any system dialogs used to grant permissions.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent this attack, use Android 5.0 and later devices, which does not allow apps to appear above any system dialogs used to grant permissions.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-38</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Abusing Device Resources for Computations</Threat>
        
        <ThreatOrigins>Mobile Malware Mines Dogecoins Litecoins for Bitcoin Payout[^V-Zhang-1]</ThreatOrigins>
        
        <ExploitExamples>Androidos_kagecoin.hbt [^TrendMicro-1]</ExploitExamples>
        <ExploitExamples>Currency-mining Android malware is so aggressive it can physically harm phones [^D-Goodin-2]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the risk of installing apps with trojan functionality, only download apps from official app stores.</Countermeasure>
            <Countermeasure>Use malware detection apps that identify malware by anomalous energy consumption.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use malware detection apps that identify malware by anomalous energy consumption.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-39</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Using Device for DDoS</Threat>
        
        
        <ExploitExamples>Android.Tascudap [^T-Katsuki-1]</ExploitExamples>
        
        <CVEExamples>CVE-2017-6982</CVEExamples>
        <CVEExamples>CVE-2017-2495</CVEExamples>
        <CVEExamples>CVE-2017-0599</CVEExamples>
        <CVEExamples>CVE-2017-0600</CVEExamples>
        <CVEExamples>CVE-2017-0603</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the risk of installing apps with trojan functionality, only download apps from official app stores.</Countermeasure>
            <Countermeasure>Use malware detection apps that identify malware by anomalous network activity.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use malware detection apps that identify malware by anomalous network activity.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-4</ThreatID>
        <ThreatCategory>Vulnerable Applications</ThreatCategory>
        <Threat>Need to Use a Known Vulnerable App or Device</Threat>
        
        
        <ExploitExamples>Stumping the Mobile Chipset [^70]</ExploitExamples>
        
        <CVEExamples>CVE-2016-5340</CVEExamples>
        <CVEExamples>CVE-2016-2059</CVEExamples>
        <CVEExamples>CVE-2016-2503</CVEExamples>
        <CVEExamples>CVE-2016-2504</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use iOS and Android runtime permission features to remove risky permissions (e.g. GPS access, contact list access, etc.) from unsupported apps or apps with known vulnerabilities.</Countermeasure>
            <Countermeasure>Uninstall vulnerable apps from the device. Once a patched version is available for download, redownload and install the app.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use iOS and Android runtime permission features to remove risky permissions (e.g. GPS access, contact list access, etc.) from unsupported apps or apps with known vulnerabilities.</Countermeasure>
            <Countermeasure>Use MAM solutions to detect vulnerable apps and prevent access to enterprise resources while the app is installed.</Countermeasure>
            <Countermeasure>Use MAM solutions to forcefully disable vulnerable apps until a patch is available and installed.</Countermeasure>
            <Countermeasure>Use MAM solutions to temporarily revoke access to sensitive device sensors or OS-provided services.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-40</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Capturing Raw Screen Buffer</Threat>
        
        <ThreatOrigins>An investigation of Chrysaor Malware on Android [^AndroidDevBlog-1]</ThreatOrigins>
        
        <ExploitExamples>An investigation of Chrysaor Malware on Android [^AndroidDevBlog-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To limit the opportunity for an attacker to realize this threat following a security patch for a priviledge escalation vulnerability, ensure timely installation of mobile OS security updates.</Countermeasure>
            <Countermeasure>To reduce the probability of installing a malicious application, obtain public apps from an official app store (e.g., Google Play, iTunes Store).</Countermeasure>
            <Countermeasure>On Adroid, to prevent an attacker from remotely installing 3rd party malicious apps, ensure Security &gt; Unknown Sources is turned off.</Countermeasure>
            <Countermeasure>To detect malicious applications, use on-device agents that automatically perform signature- and/or behavior-based malware detection.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To limit the opportunity for an attacker to realize this threat following a security patch for a priviledge escalation vulnerability, ensure timely installation of mobile OS security updates.</Countermeasure>
            <Countermeasure>To prevent users of managed Android devices from installing applications from unknown sources, deploy EMM solutions that effectively disable the Unknown Sources feature.</Countermeasure>
            <Countermeasure>To detect malicious applications, use on-device agents that automatically perform signature- and/or behavior-based malware detection.</Countermeasure>
            <Countermeasure>To prevent granting access to compromised devices, use tools or device APIs (Android SafetyNet, Samsung Knox hardware-backed remote attestation, or other applicable remote attestation technologies) to detect and block enterprise connectivity from devices that fail attestation or integrity checks.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-41</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Recording Audio by Placing or Answering Phone Calls</Threat>
        
        <ThreatOrigins>An investigation of Chrysaor Malware on Android [^AndroidDevBlog-1]</ThreatOrigins>
        
        <ExploitExamples>An investigation of Chrysaor Malware on Android [^AndroidDevBlog-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To prevent data collection using the device microphone, install a protective cover over the device which reliably blocks sound from being picked up when features requiring use of the microphone are not in use. Alternatively, turn off the device or do not take it into areas in which audio collection is a main concern.</Countermeasure>
            <Countermeasure>To reduce the potential for such an exploit for which a security patch is available, ensure OS security updates are installed in a timely fashion.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the potential for such an exploit for which a security patch is available, ensure OS security updates are installed in a timely fashion.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-43</ThreatID>
        <ThreatCategory>Malicious or privacy-invasive application</ThreatCategory>
        <Threat>Malware Uninstalls Itself</Threat>
        
        <ThreatOrigins>An investigation of Chrysaor Malware on Android [^AndroidDevBlog-1]</ThreatOrigins>
        
        <ExploitExamples>An investigation of Chrysaor Malware on Android [^AndroidDevBlog-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To help reduce the opportunity for attack following availability of patches, ensure timely installation of mobile OS security updates.</Countermeasure>
            <Countermeasure>On Android devices, to prevent an attacker from remotely installing malicious applications from unknown sources, ensure Security &gt; Unknown Sources is turned off; an enterprise can deploy EMM solutions that enforce a policy to never permit the installation of apps from unknown sources.</Countermeasure>
            <Countermeasure>To decrease the time-to-detection following the installation of a malicious app, deploy on-device agents that automatically detect the installation of any app and initiate either local (on-device) or remote processes for detection and identification of malware and potentially-harmful applications.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To help reduce the opportunity for attack following availability of patches, ensure timely installation of mobile OS security updates.</Countermeasure>
            <Countermeasure>To reduce the potential of installing malicious applications, download public apps directly from an official app store (e.g., Google Play, iTunes Store).</Countermeasure>
            <Countermeasure>On Android devices, to prevent an attacker from remotely installing malicious applications from unknown sources, ensure Security &gt; Unknown Sources is turned off; an enterprise can deploy EMM solutions that enforce a policy to never permit the installation of apps from unknown sources.</Countermeasure>
            <Countermeasure>To decrease the time-to-detection following the installation of a malicious app, deploy on-device agents that automatically detect the installation of any app and initiate either local (on-device) or remote processes for detection and identification of malware and potentially-harmful applications.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-5</ThreatID>
        <ThreatCategory>Vulnerable Applications</ThreatCategory>
        <Threat>Malicious Code Downloaded via Malicious URL</Threat>
        
        <ThreatOrigins>Android Towelroot Exploit Used to Deliver Dogspectus Ransomware [^71]</ThreatOrigins>
        <ThreatOrigins>JailbreakMe [^72]</ThreatOrigins>
        
        
        <CVEExamples>CVE-2010-1797</CVEExamples>
        <CVEExamples>CVE-2010-2973</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>To reduce the potential for drive-by downloads or similar exploits, ensure the latest security updates for the mobile OS are installed.</Countermeasure>
            <Countermeasure>Use built-in browser features or third-party products to identify and avoid known malicious web pages.</Countermeasure>
            <Countermeasure>Use a proxy or VPN for all web traffic and identify and block connections to known malicious web pages.</Countermeasure>
            <Countermeasure>Educate enterprise users about safe browsing practices.</Countermeasure>
            <Countermeasure>Use anti-malware device agents to detect malicious applications inadvertently installed on the device.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the potential for drive-by downloads or similar exploits, ensure the latest security updates for the mobile OS are installed.</Countermeasure>
            <Countermeasure>Use built-in browser features or third-party products to identify and avoid known malicious web pages.</Countermeasure>
            <Countermeasure>Use anti-malware device agents to detect malicious applications inadvertently installed on the device.</Countermeasure>
            <Countermeasure>Regularly use Verify Apps feature to identify potentially harmful applications.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-6</ThreatID>
        <ThreatCategory>Vulnerable Applications</ThreatCategory>
        <Threat>Vulnerable Third-Party Library</Threat>
        
        <ThreatOrigins>A Pattern for Remote Code Execution using Arbitrary File Writes and MultiDex Applications [^73]</ThreatOrigins>
        <ThreatOrigins>Unsafe Exposure Analysis of Mobile In-App Advertisements [^74]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify apps that use vulnerable libraries.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-7</ThreatID>
        <ThreatCategory>Vulnerable Applications</ThreatCategory>
        <Threat>Data or Funcionality Exposed to Untrusted Apps</Threat>
        
        
        <ExploitExamples>eBay for Android Content Provider Injection Vulnerability [^75]</ExploitExamples>
        <ExploitExamples>Smishing Vulnerability in Multiple Android Platforms [^76]</ExploitExamples>
        <ExploitExamples>Android SMS Spoofer [^77]</ExploitExamples>
        <ExploitExamples>Content provider permission bypass allows malicious application to access data [^78]</ExploitExamples>
        
        <CVEExamples>CVE-2016-2810</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use app-vetting tools or services to identify apps that expose functionality to untrusted apps.</Countermeasure>
            <Countermeasure>Use personal/enterprise app separation features (e.g. Android for Work or Samsung KNOX Workspace) so that vulnerabilities in an enterprise app cannot be exploited by a personal app or vice versa.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-8</ThreatID>
        <ThreatCategory>Vulnerable Applications</ThreatCategory>
        <Threat>WebView App Vulnerable to Browser-Based Attacks</Threat>
        
        
        <ExploitExamples>WebView addJavaScriptInterface Remote Code Execution [^79]</ExploitExamples>
        <ExploitExamples>DRD13. Do not provide addJavaScriptInterface method access in a WebView which could contain untrusted content [^80]</ExploitExamples>
        <ExploitExamples>Remote code execution on Android devices [^81]</ExploitExamples>
        
        <CVEExamples>CVE-2017-0587</CVEExamples>
        <CVEExamples>CVE-2017-0588</CVEExamples>
        <CVEExamples>CVE-2017-0589</CVEExamples>
        <CVEExamples>CVE-2017-0590</CVEExamples>
        <CVEExamples>CVE-2017-0591</CVEExamples>
        <CVEExamples>CVE-2017-0592</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use app-vetting tools or services to identify vulnerable applications</Countermeasure>
            <Countermeasure>Use a proxy or VPN for connections to decrease the chance of success of a man-in-the-middle attack.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>Always use https URLs for WebView content.</Countermeasure>
            <Countermeasure>Avoid enabling the WebView JavaScript bridge (with addJavascriptInterface) unless explicitly needed.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>APP-9</ThreatID>
        <ThreatCategory>Vulnerable Applications</ThreatCategory>
        <Threat>Compromised Backend Server</Threat>
        
        
        
        <CVEExamples>CVE-2015-1581</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>Follow best practices for server security, for example as described in https://www.owasp.org/index.php/Mobile_Top_10_2014-M1</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-0</ThreatID>
        <ThreatCategory>Authentication: User or Device to Remote Service</ThreatCategory>
        <Threat>Use of Stolen Credentials</Threat>
        
        <ThreatOrigins>Mobile Threat Protection: A Holistic Approach to Securing Mobile Data and Devices [^61]</ThreatOrigins>
        
        <ExploitExamples>CBS App &amp; Mobility Website [^116]</ExploitExamples>
        <ExploitExamples>The Fork [^117]</ExploitExamples>
        <ExploitExamples>Star Q8 [^118]</ExploitExamples>
        <ExploitExamples>Corriere Della Sera App [^119]</ExploitExamples>
        <ExploitExamples>LaTribune [^120]</ExploitExamples>
        <ExploitExamples>Card Crypt [^121]</ExploitExamples>
        <ExploitExamples>Starbucks Caught Storing Mobile Passwords in Clear Text [^122]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To hinder an authentication attempt with a stolen credential, use anomaly detection based on user activity to detect abnormalities (e.g. authentication from new domains, unusual times, or to rarely-accessed services) and require additional authentication steps before granting access.</Countermeasure>
            <Countermeasure>To mitigate an attacker's ability to achieve authentication using a stolen credential, when possible, configure services to use multi-factor authentication. Ideally, the additional factor should be provided by a separate device than the one being used to perform primary authentication (e.g., laptop and mobile app). Further, avoid the use of SMS messages for 2FA codes, as SMS messages can be readily intercepted.</Countermeasure>
            <Countermeasure>To limit the value of stolen credentials to an attacker, use centralized identity and access management tools that permit simultaneous revocation of stolen authentication credentials across all access control mechanisms and terminate active sessions based on those credentials.</Countermeasure>
            <Countermeasure>To limit the value of stolen credentials, enforce a policy that limits the maximum age of credentials and limits the use of identical or similar credentials.</Countermeasure>
            <Countermeasure>To limit the value of stolen credentials, enforce an access policy that restricts the resources a user can access based on location parameters (e.g. domain, IP address, MAC address, geolocation) of the authentication request.</Countermeasure>
            <Countermeasure>Incorporate the principle of least privilege to limit lateral movement by an attacker with stolen credentials.</Countermeasure>
            <Countermeasure>To limit the potential for predictive attacks on new passwords, employ authentication mechanisms that utilizes randomly generated one-time passwords or tokens for access from untrusted locations.</Countermeasure>
            <Countermeasure>To prevent an attacker with a stolen password from locking out the legitimate user or defining new credentials, require 2-factor authentication mechanisms to change authentication credentials or credential recovery processes.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To mitigate an attacker's ability to achieve authentication using a stolen credential, when possible, configure services to use multi-factor authentication. Ideally, the additional factor should be provided by a separate device than the one being used to perform primary authentication (e.g., laptop and mobile app). Further, avoid the use of SMS messages for 2FA codes, as SMS messages can be readily intercepted.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-1</ThreatID>
        <ThreatCategory>Authentication: User to Device</ThreatCategory>
        <Threat>Unauthorized Information Disclosure via Lockscreen</Threat>
        
        <ThreatOrigins>About the security content of iOS 10.3 [Apple-1]</ThreatOrigins>
        
        <ExploitExamples>How hackers can access iPhone contacts and photos without a password [^129]</ExploitExamples>
        
        <CVEExamples>CVE-2017-2397</CVEExamples>
        <CVEExamples>CVE-2017-2399</CVEExamples>
        <CVEExamples>CVE-2017-2452</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To limit opportunity for lockscreen bypass attacks, strongly secure mobile devices when not directly attended.</Countermeasure>
            <Countermeasure>To reduce the success of lockscreen bypass exploits, ensure mobile OS security updates are installed in a timely manner</Countermeasure>
            <Countermeasure>To reduce the potential that sensitive information is displayed on the lock screen, use mobile OS settings to disable access to notification features for apps that may receive sensitive content, or configure such notifications to only display when the device is unlocked.</Countermeasure>
            <Countermeasure>Use mobile OS settings or deploy MDM solutions that can effectively enforce policies to limit the data or services available while the device screen is locked (e.g., notifications, voice-operated assistants, camera)</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the success of lockscreen bypass exploits, ensure mobile OS security updates are installed in a timely manner</Countermeasure>
            <Countermeasure>Use mobile OS settings or deploy MDM solutions that can effectively enforce policies to limit the data or services available while the device screen is locked (e.g., notifications, voice-operated assistants, camera)</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-10</ThreatID>
        <ThreatCategory>Authentication: User or Device to Remote Service</ThreatCategory>
        <Threat>Capturing Credentials</Threat>
        
        <ThreatOrigins>OAuth 2.0 for Native Apps [^141]</ThreatOrigins>
        
        <ExploitExamples>Stealing Passwords is Easy in Native Mobile Apps Despite OAuth [^140]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to identify malicious behaviors in apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-11</ThreatID>
        <ThreatCategory>Authentication: User or Device to Remote Service</ThreatCategory>
        <Threat>Stolen Credentials</Threat>
        
        <ThreatOrigins>Mobile Top 10 2016 [^9]</ThreatOrigins>
        
        <ExploitExamples>Serious OS X and iOS Flaws Let Hackers Steal Keychain, 1Password Contents [^130]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>When creating files, named sockets, or similar resources statically-defined (i.e., predictable by an attacker), verify that the resource does not already exist. If it does, cease execution and exit the app with an error that prompts the user to take action.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use app-vetting tools or services to identify malicious apps that exploit cross-application resource attacks.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-12</ThreatID>
        <ThreatCategory>Authentication: User or Device to Network</ThreatCategory>
        <Threat>Insecure Credential Storage</Threat>
        
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>Follow best practices for storing sensitive material such as using short-live tokens and the AccountManager on Android and Keychain for iOS. [^227][^228]</Countermeasure>
            <Countermeasure>To mitigate the risk associated with a stolen credential, use authentication protocols that generate unpredictable one-time cryptographic tokens that are replay-resistant (e.g. public key authentication, FIDO Alliance protocols)</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Educate users that Oauth 2.0 style authorization request from native applications should only be made through external user-agents (system browser)</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-13</ThreatID>
        <ThreatCategory>Mobile Operating System</ThreatCategory>
        <Threat>Credential Theft via Keylogging</Threat>
        
        <ThreatOrigins>An investigation of Chrysaor Malware on Android [^AndroidDevBlog-1]</ThreatOrigins>
        
        <ExploitExamples>An investigation of Chrysaor Malware on Android [^AndroidDevBlog-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the potential of downloading a malicious app, such as a keylogger, only install (or permit the installation of) mobile apps downloaded directly from an official app store (e.g. Apple iTunes Store, Google Play).</Countermeasure>
            <Countermeasure>To help reduce the opportunity for attack following availability of patches, insure timely installation of mobile OS security updates.</Countermeasure>
            <Countermeasure>To detect malicious applications, deploy on-device agents that automatically initiate malware detection for all installed applications. </Countermeasure>
            <Countermeasure>To decrease the value of captured credentials, enable 2-factor authentication for sensitive services (e.g., online banking) where the second factor is not tied to the same device.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the potential of downloading a malicious app, such as a keylogger, only install (or permit the installation of) mobile apps downloaded directly from an official app store (e.g. Apple iTunes Store, Google Play).</Countermeasure>
            <Countermeasure>To help reduce the opportunity for attack following availability of patches, insure timely installation of mobile OS security updates.</Countermeasure>
            <Countermeasure>To detect malicious applications, deploy on-device agents that automatically initiate malware detection for all installed applications. </Countermeasure>
            <Countermeasure>Use tools or device APIs (Android SafetyNet, Samsung Knox hardware-backed remote attestation, or other applicable remote attestation technologies) to detect and block enterprise connectivity from devices until they pass such integrity checks.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-2</ThreatID>
        <ThreatCategory>Authentication: User to Device</ThreatCategory>
        <Threat>PIN/password Brute Force</Threat>
        
        
        <ExploitExamples>Black Box Brouhaha Breaks Out Over Brute Forcing of iPhone Pin Lock [^125]</ExploitExamples>
        <ExploitExamples>The bumpy road towards iPhone 5c NAND mirroring [^243]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To directly increase the time required for a successful brute-force authentication attempt, increase the length, complexity, and randomness of device unlock codes, with a strong preference for a 'password' option that may contain letters (uppercase and lowercase), numbers, and special characters, rather than a simpler numeric PIN or (on Android devices) a geometric pattern.</Countermeasure>
            <Countermeasure>To increase the time required to perform brute-force attacks, use mobile devices that incur incrementally increasing delays when the wrong unlock code is entered.</Countermeasure>
            <Countermeasure>To reduce the likelihood of a successful brute-force user-to-device authentication attempt on a device, configure the device to wipe all device data after a preset number of consecutive failed unlock attempts (e.g., 10).</Countermeasure>
            <Countermeasure>To reduce the opportunity for an attacker to conduct a brute-force authentication attack against the device, use strong physical security measures (e.g.,locking the device into a container) when not directly attended.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent employees from accessing enterprise resources from devices with a weak device unlock code, deploy MDM or containerization solutions that enable device configuration policies that require the unlock code for enrolled devices to meet minimum length and complexity requirements prior to granting access to enterprise resources.</Countermeasure>
            <Countermeasure>To increase the time required to perform brute-force attacks, use mobile devices that incur incrementally increasing delays when the wrong unlock code is entered.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-3</ThreatID>
        <ThreatCategory>Authentication: User to Device</ThreatCategory>
        <Threat>Inferring PIN/password from Recordings</Threat>
        
        
        <ExploitExamples>Black Hat: Google Glass Can Steal Your Passcodes [^126]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>When entering PINs, passwords, or other secrets, limit visibility of the device to others.</Countermeasure>
            <Countermeasure>Use devices and applications that support biometric authentication methods (e.g. fingerprint), which are not as easily captured by casual recording methods as entry of PINs or passwords.</Countermeasure>
            <Countermeasure>Increase the minimum length and reduce the maximum lifetime of passwords and PINs to reduce the probability a inference attack will be successful.</Countermeasure>
            <Countermeasure>When possible, configure remote services with authentication mechanisms that allow the use of random one-time passwords, which if recorded during entry, cannot later be used to authenticate.</Countermeasure>
            <Countermeasure>To prevent a successful password inferrence attack from singly enabling authentication by an attacker, configure  sensitive services to require 2-factor authentication.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use devices and applications that support biometric authentication methods (e.g. fingerprint), which are not as easily captured by casual recording methods as entry of PINs or passwords.</Countermeasure>
            <Countermeasure>Increase the minimum length and reduce the maximum lifetime of passwords and PINs to reduce the probability a inference attack will be successful.</Countermeasure>
            <Countermeasure>When possible, configure remote services with authentication mechanisms that allow the use of random one-time passwords, which if recorded during entry, cannot later be used to authenticate.</Countermeasure>
            <Countermeasure>To prevent a successful password inferrence attack from singly enabling authentication by an attacker, configure  sensitive services to require 2-factor authentication.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile OS Developer</Actor>
            <Countermeasure>To increase the difficulty of visual or sensor-based inference attacks on entries by the on-screen keyboard, a randomized keyboard layout for PIN or password entry could be implemented as a feature of the mobile OS.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-4</ThreatID>
        <ThreatCategory>Authentication: User to Device</ThreatCategory>
        <Threat>Inferring PIN/password from Screen Smudges</Threat>
        
        <ThreatOrigins>Smudge Attacks on Smartphone Touch Screens [^124]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To increase the difficulty in successfully inferring the authentication credential, increase the minimum length and complexity of PINs, passwords, or other authentication credentials.</Countermeasure>
            <Countermeasure>To reduce the window of opporuntity during which an attacker can use an inferred authentication credential, reduce the maximum lifetime of authentication credentials.</Countermeasure>
            <Countermeasure>Use devices and applications that support biometric authentication methods (e.g. facial recognition, voice print), which do not result in direct physical evidence of authentication data being left on the device for later analysis.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To increase the difficulty in successfully inferring the authentication credential, increase the minimum length and complexity of PINs, passwords, or other authentication credentials.</Countermeasure>
            <Countermeasure>To reduce the window of opporuntity during which an attacker can use an inferred authentication credential, reduce the maximum lifetime of authentication credentials.</Countermeasure>
            <Countermeasure>To limit the amount of data available to an attacker conducting a screen smudge inferrence attack, clean the screen of the device often, particularly when leaving the device directly unattended.</Countermeasure>
            <Countermeasure>To limit the amount of authentication data available to the attacker (e.g. size, and number of smudges), enter device unlock codes and passwords using a stylus on (ideally) a clean device screen.</Countermeasure>
            <Countermeasure>Use devices and applications that support biometric authentication methods (e.g. facial recognition, voice print), which do not result in direct physical evidence of authentication data being left on the device for later analysis.</Countermeasure>
            <Countermeasure>To limit the window of opportunity for an attacker to conduct a screen smudge inferrence attack, physically secure the device when it is being left directly unattended.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile OS Developer</Actor>
            <Countermeasure>To increase the difficulty of visual or sensor-based inference attacks on entries by the on-screen keyboard, a randomized keyboard layout for PIN or password entry could be implemented as a feature of the mobile OS.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-5</ThreatID>
        <ThreatCategory>Authentication: User to Device</ThreatCategory>
        <Threat>Inferring PIN/password from Sensor Information</Threat>
        
        <ThreatOrigins>Your Smartphone Isn't As Safe As You'd Think [^128]</ThreatOrigins>
        
        <ExploitExamples>Touchscreen keylogger created using accelerometer movement during typing [^248]</ExploitExamples>
        <ExploitExamples>Tapprints: your finger taps have fingerprints [^249]</ExploitExamples>
        <ExploitExamples>ToughLogger: Inferring Keystrokes on Touch Screen from Smartphone Motion [^250]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To detect Android apps that may realize this threat, use the Verify Apps feature to detect 3rd party apps that appear to abuse access to device sensors.</Countermeasure>
            <Countermeasure>To reduce the opportunity for this threat, do not authorize (or revoke if granted) access to device sensors by untrusted applications when those applications are not actively in use (e.g., running in the background).</Countermeasure>
            <Countermeasure>To reduce the opportunity for this threat, use access controls native to the mobile OS to revoke access to device peripherals or services for an app when related application functions are no longer in use.</Countermeasure>
            <Countermeasure>To prevent this threat, before authenticating to sensitive applications, forcibly close all untrusted applications that have access to device sensors such as an accelerometer or gyroscope.</Countermeasure>
            <Countermeasure>To prevent this threat, before authenticating to sensitive applications, use OS configuration settings to revoke global access for all apps to device sensors such as an accelerometer or gyroscope.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the opporunity for this threat, deploy containerization or MAM solutions in combination with devices that successfully enforce policies that restrict access to device sensors by untrusted apps.</Countermeasure>
            <Countermeasure>To detect apps that may realize this threat, use app-vetting services to determine if any apps present in your mobile device deployment appear to use sensor data in an untrusted manner.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile OS Developer</Actor>
            <Countermeasure>To increase the difficulty of visual or sensor-based inference attacks on entries by the on-screen keyboard, a randomized keyboard layout for PIN or password entry could be implemented as a feature of the mobile OS.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-6</ThreatID>
        <ThreatCategory>Authentication: User to Device</ThreatCategory>
        <Threat>Android Smartlock Device Spoofing</Threat>
        
        <ThreatOrigins>Which is the most secure Android Smart Lock? [^131]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>As appropriate, use MDM solutions that enable policies to prevent features that would automatically unlock mobile devices or prevent mobile devices from otherwise locking based on your existing security policy, such as after a period of user inactivity.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the potential than communication from a paired device can be successfully spoofed, observe physical security measures to prevent interception of communication during the initial pairing of devices (e.g. in a secure location outside of which, interception or manipulation of NFC or Bluetooth signals is limited.</Countermeasure>
            <Countermeasure>To reduce the potential an attacker can, post-pairing, spoof a paired device, maintain strong physical security over it when being left directly unattended (e.g., secure it in a locked container).</Countermeasure>
            <Countermeasure>To reduce the potential an attacker acquires your device in an unlocked but unattended state or can acquire the pair of devices, avoid pairing your mobile device with a device that is typically already located in proximity to it, such as a keyboard or headset.</Countermeasure>
            <Countermeasure>Avoid pairing with Bluetooth 2.0 or earlier devices, or those that otherwise only support Legacy Pairing, which is vulnerable to eavesdropping attacks that greatly facilitates the spoofing a trusted device.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-7</ThreatID>
        <ThreatCategory>Authentication: User to Device</ThreatCategory>
        <Threat>Biometric Spoofing</Threat>
        
        <ThreatOrigins>Liveness Detection to Fight Biometric Spoofing [^132]</ThreatOrigins>
        <ThreatOrigins>iPhone 5S Touch ID susceptible to fingerprint spoofs [^135]</ThreatOrigins>
        
        <ExploitExamples>Why I hacked TouchID (again) and still think it's awesome [^133]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the opportunity for an attacker to conduct a biometric spoofing attack, physically secure the device (e.g., lock it in a secure container) when leaving it directly unattended.</Countermeasure>
            <Countermeasure>To prevent an attacker able to successfully conduct a biometric spoofing attack against the device from automatically gaining access to sensitive data, implement multi-factor authentication mechanisms for sensitive apps or services.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device user</Actor>
            <Countermeasure>Consider devices in which multi-factor biometric authentication mechanisms transform the biometric data using an additional factor (e.g., password or cryptographic token).</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Consider devices in which multi-factor biometric authentication mechanisms transform the biometric data using an additional factor (e.g., password or cryptographic token).</Countermeasure>
            <Countermeasure>To prevent an attacker able to successfully conduct a biometric spoofing attack against the device from automatically gaining access to sensitive data, implement multi-factor authentication mechanisms for sensitive apps or services.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-8</ThreatID>
        <ThreatCategory>Authentication: User or Device to Remote Service</ThreatCategory>
        <Threat>Man-in-the-middle Malicious Website Substitution</Threat>
        
        <ThreatOrigins>Man-in-the-Middle Attack [^136]</ThreatOrigins>
        
        <ExploitExamples>Using spoofed Wi-Fi to attack mobile devices [^20]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent captured authentication credentials from enabling persistent access to sensitive services, configure them with authentication methods that use unpredictable one-time cryptographic tokens that are replay-resistant (e.g. public key authentication, FIDO Alliance protocols, pre-shared access codes).</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To limit the usefulness of captured passwords, do not use the same password or derivations thereof to authenticate to multiple services.</Countermeasure>
            <Countermeasure>To increase the difficulty of establishing a MiTM attack on a given wireless access session in which authentication credentials are exchanged, avoid authenticating to sensitive remote services over untrusted Wi-Fi networks.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>AUT-9</ThreatID>
        <ThreatCategory>Authentication: User or Device to Remote Service</ThreatCategory>
        <Threat>Phishing Websites</Threat>
        
        <ThreatOrigins>Phishing Defenses for Webmail Providers [^138]</ThreatOrigins>
        
        <ExploitExamples>Your Account PayPal Has Been Limited Phishing Scam [^139]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Ensure corporate e-mail policy is configured to scan for suspicious files, executables, or attachments, and segregate such emails to increase end-user awareness of their potential to contain malicious content.</Countermeasure>
            <Countermeasure>Deploy email and web proxy services that will examine URL resources for malicious content, and if any is found, prevent delivery of the message to the intended recipient.</Countermeasure>
            <Countermeasure>Deploy email filtering tools or services that will automatically remove detected URLs from the body of emails from untrusted domains.</Countermeasure>
            <Countermeasure>Educate end users on how to recognize phishing attempts and increase their awareness of techniques to browse safely from mobile devices, such as tap-and-hold on a hyperlink to examine its associated URL.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-0</ThreatID>
        <ThreatCategory>Mobile Operating System</ThreatCategory>
        <Threat>Privilege Escalation via Software Vulnerabilities</Threat>
        
        <ThreatOrigins>Internet Security Threat Report 2016 [^110]</ThreatOrigins>
        <ThreatOrigins>Mobile Security: Threats and Countermeasures [^90]</ThreatOrigins>
        
        <ExploitExamples>Zimperium Applauds Google's Rapid Response to Unpatched Kernel Exploit [^213]</ExploitExamples>
        <ExploitExamples>Remote Code Execution as System User on Samsung Phones [^55]</ExploitExamples>
        
        <CVEExamples>CVE-2010-2973</CVEExamples>
        <CVEExamples>CVE-2016-4655</CVEExamples>
        <CVEExamples>CVE-2016-4656</CVEExamples>
        <CVEExamples>CVE-2017-0538</CVEExamples>
        <CVEExamples>CVE-2017-0539</CVEExamples>
        <CVEExamples>CVE-2017-0540</CVEExamples>
        <CVEExamples>CVE-2017-0544</CVEExamples>
        <CVEExamples>CVE-2017-0546</CVEExamples>
        <CVEExamples>CVE-2017-0547</CVEExamples>
        <CVEExamples>CVE-2017-0548</CVEExamples>
        <CVEExamples>CVE-2017-0549</CVEExamples>
        <CVEExamples>CVE-2017-0553</CVEExamples>
        <CVEExamples>CVE-2017-0554</CVEExamples>
        <CVEExamples>CVE-2017-0556</CVEExamples>
        <CVEExamples>CVE-2017-0557</CVEExamples>
        <CVEExamples>CVE-2017-0558</CVEExamples>
        <CVEExamples>CVE-2017-0564</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the risk to enterprise resources being accessed from vulnerable devices, deploy EMM/MDM solutions that can successfully enforce policies to monitor the OS version of devices and block enterprise connectivity from out-of-date devices or those with known-exploitable privilege escalation vulnerabilities.</Countermeasure>
            <Countermeasure>To help reduce the latency between exploit notification and patch availability, purchase devices from vendors/carriers who have committed to providing timely updates or who have known track records for prompt updates.</Countermeasure>
            <Countermeasure>To help reduce the opportunity for attack following availability of patches, configure automatic installation of, or, at a minimum, automatic notification of the availability of mobile OS security updates.</Countermeasure>
            <Countermeasure>Use tools or device APIs (Android SafetyNet, Samsung Knox hardware-backed remote attestation, or other applicable remote attestation technologies) to detect and block enterprise connectivity from devices that fail attestation or integrity checks.</Countermeasure>
            <Countermeasure>Disable components with known vulnerabilities (e.g. disable MMS, Bluetooth, etc.) until the vulnerability is patched to prevent exploitation.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To help reduce the opportunity for attack following availability of patches, configure automatic installation of, or, at a minimum, automatic notification of the availability of mobile OS security updates.</Countermeasure>
            <Countermeasure>Disable components with known vulnerabilities (e.g. disable MMS, Bluetooth, etc.) until the vulnerability is patched to prevent exploitation.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-1</ThreatID>
        <ThreatCategory>Mobile Operating System</ThreatCategory>
        <Threat>Rooting or Jailbreaking</Threat>
        
        <ThreatOrigins>Mobile Security: Threats and Countermeasures [^90]</ThreatOrigins>
        
        
        <CVEExamples>CVE-2015-3636</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Ensure devices are kept up-to-date with security patches to decrease the likelihood that they can be rooted/jailbroken.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Ensure devices are kept up-to-date with security patches to decrease the likelihood that they can be rooted/jailbroken.</Countermeasure>
            <Countermeasure>Use hardware mechanisms, device APIs (Android SafetyNet, Samsung Knox hardware-backed remote attestation, or other applicable remote attestation technologies), or other tools to detect rooted/jailbroken devices, provide notification to the enterprise and user, and block enterprise connectivity.</Countermeasure>
            <Countermeasure>Help users to understand the risks associated with rooting/jailbreaking their devices.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-10</ThreatID>
        <ThreatCategory>Device Drivers</ThreatCategory>
        <Threat>Low level backdoor inadvertently left by firmware developer</Threat>
        
        <ThreatOrigins>This is what a root debug backdoor in a Linux kernel looks like [^207]</ThreatOrigins>
        <ThreatOrigins>Chinese ARM vendor left developer backdoor in kernel for Android, other devices [^208]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Obtain devices from a reputable vendor with a strong record of addressing security flaws in a timely fashion.</Actor>
            <Countermeasure>Enterprises</Countermeasure>
            <Countermeasure>Mobile Device User</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>To reduce the opportunity for an attacker to exploit a patched vulnerability, ensure security updates are applied in a timely manner by configuring automated installation of or, at a minimum, automatic notification of the availability of security updates.</Actor>
            <Countermeasure>Enterprise</Countermeasure>
            <Countermeasure>Mobile Device User</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>To reduce the opportunity for attacks against various firmware components, disable device features when not in use (e.g., Bluetooth, Wi-Fi, NFC), and globally revoke access to unused device sensors or OS-provided functions (e.g., camera, microphone, location services).</Actor>
            <Countermeasure>Mobile Device User</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-11</ThreatID>
        <ThreatCategory>Isolated Execution Environments</ThreatCategory>
        <Threat>Vulnerable Isolated Execution Environment Software</Threat>
        
        <ThreatOrigins>Extracting Qualcomm's KeyMaster Keys - Breaking Android Full Disk Encryption [^209]</ThreatOrigins>
        
        
        <CVEExamples>CVE-2016-0825</CVEExamples>
        <CVEExamples>CVE-2016-5349</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To decrease the latency between availability and installation of security fixes for isolated execution environments, configure devices (potentially using EMM solutions) to automatically install security updates, or at a minimum, provide automated notification to the user that security updates are available for installation.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To decrease the latency between availability and installation of security fixes for isolated execution environments, configure devices (potentially using EMM solutions) to automatically install security updates, or at a minimum, provide automated notification to the user that security updates are available for installation.</Countermeasure>
            <Countermeasure>To decrease the risk of persistent and unpatched vulnerabilities in isolated execution environments in deployed devices, consider acquiring mobile devices from vendors and carriers with a history of addressing and releasing security updates in a timely fashion.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Original Equipment Manufacturer</Actor>
            <Countermeasure>Use TEE OS that provide integrity protections over trustlets, such as verification of digital signatures on installed trustlets, such as Trusty OS. [^222]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-12</ThreatID>
        <ThreatCategory>Isolated Execution Environments</ThreatCategory>
        <Threat>Backdoors Introduced by Developers</Threat>
        
        <ThreatOrigins>Chinese ARM vendor left developer backdoor in kernel for Android, other devices [^208]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-13</ThreatID>
        <ThreatCategory>Isolated Execution Environments</ThreatCategory>
        <Threat>Reverse Engineering of TEE Components</Threat>
        
        <ThreatOrigins>ARM Security Technology Building a Secure System using TrustZone Technology [^210]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Assume any device that has been under the physical control of an attacker for any timeframe sufficient to have executed this attack has been permanently compromised and should be transitioned to end-of-lifecycle.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-14</ThreatID>
        <ThreatCategory>Isolated Execution Environments</ThreatCategory>
        <Threat>Reverse Engineering Components</Threat>
        
        <ThreatOrigins>ARM Security Technology Building a Secure System using TrustZone Technology [^210]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Assume any device that has been under the physical control of an attacker for any timeframe sufficient to have executed this attack has  been permanently compromised and should be transition to the to end-of-lifecycle.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-15</ThreatID>
        <ThreatCategory>Boot firmware</ThreatCategory>
        <Threat>Bootloader Unlocking</Threat>
        
        
        <ExploitExamples>Xiaomi Locks Mi Devices' Bootloaders On Fears Of Malware And Security Risks: Up To 21 Days To Unlock [^47]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Educate users of the risks of unlocking the device bootloader.</Countermeasure>
            <Countermeasure>Use EMM/MDM solutions or on-device agents that can potentially detect rooted or jail-broken devices and subsequently, successfully block access to enterprise resources.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To mitigate the potential of accessing sensitive data or functionality on rooted or jail-broken devices, leverage device attestation APIs to determine the device is in a known-good state prior to executing sensitve actions.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-16</ThreatID>
        <ThreatCategory>Boot firmware</ThreatCategory>
        <Threat>Boot Firmware Vulnerability</Threat>
        
        
        
        <CVEExamples>CVE-2009-2795</CVEExamples>
        
    </row>
    
    <row>
        <ThreatID>STA-17</ThreatID>
        <ThreatCategory>Boot firmware</ThreatCategory>
        <Threat>Operating System Downgrade</Threat>
        
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use EMM/MDM solutions in combination with devices that can detect mobile OS verions and successfully block access to enterprise resources from devices running unapproved OS versions.</Countermeasure>
            <Countermeasure>Consider the use of iOS devices; to prevent devices from being downgraded to older versions that lack the latest security updates, iOS uses a process called System Software Authorization. [^54]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-18</ThreatID>
        <ThreatCategory>Baseband Subsystem</ThreatCategory>
        <Threat>Remote Code Execution</Threat>
        
        
        <ExploitExamples>Samsung S6 calls open to man-in-the-middle base station snooping [^48]</ExploitExamples>
        <ExploitExamples>Software flaw puts mobile phones and networks at risk of complete takeover [^49]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Original Equipment Manufacturer</Actor>
            <Countermeasure>Implementation of a baseband firewall.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-19</ThreatID>
        <ThreatCategory>Baseband Subsystem</ThreatCategory>
        <Threat>Inadequate Baseband Processor and Application Processor Separation</Threat>
        
        
        <ExploitExamples>Baseband Attacks: Remote Exploitation of Memory Corruptions in Cellular Protocol Stacks [^50]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Original Equipment Manufacturer</Actor>
            <Countermeasure>Implementation of a baseband firewall</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-2</ThreatID>
        <ThreatCategory>Mobile Operating System</ThreatCategory>
        <Threat>Improper Application Update Authentication</Threat>
        
        <ThreatOrigins>Android: One Root to Own Them All [^202]</ThreatOrigins>
        
        <ExploitExamples>Own your Android! Yet Another Universal Root [^214]</ExploitExamples>
        
        <CVEExamples>CVE-2013-4787</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Monitor the security patch state of devices and block enterprise connectivity from out-of-date devices with known exploitable vulnerabilities.</Countermeasure>
            <Countermeasure>Purchase devices from vendors/carriers who have committed to providing timely updates or who have known track records for prompt updates.</Countermeasure>
            <Countermeasure>Ensure devices are kept up-to-date with security patches to decrease the likelihood that they can be rooted/jailbroken.</Countermeasure>
            <Countermeasure>Use tools or device APIs (Android SafetyNet, Samsung Knox hardware-backed remote attestation, or other applicable remote attestation technologies) to detect and block enterprise connectivity from known compromised devices.</Countermeasure>
            <Countermeasure>Use device APIs (e.g. SystemUpdatePolicy) to enforce system update policies.</Countermeasure>
            <Countermeasure>Restrict installation of apps from unofficial app stores, which may not undergo certificate validation processes (e.g., side-loading)</Countermeasure>
            <Countermeasure>Use device built-in separation technologies such as Android for Work, Apple iOS managed apps, or Samsung Knox Workspace to provide a level of separation between enterprise apps and potentially harmful personal-use apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-20</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>SIM Card Crypto Downgrade</Threat>
        
        <ThreatOrigins>Rooting SIM Cards [^211]</ThreatOrigins>
        
        <ExploitExamples>Rooting SIM Cards [^211]</ExploitExamples>
        
        
    </row>
    
    <row>
        <ThreatID>STA-21</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>SIM Software Vulnerabilites</Threat>
        
        
        <ExploitExamples>Spoofing and intercepting SIM commands through STK framework [^219]</ExploitExamples>
        
        <CVEExamples>CVE-2015-3843</CVEExamples>
        
    </row>
    
    <row>
        <ThreatID>STA-22</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>SIM Card Theft</Threat>
        
        
        <ExploitExamples>AT&amp;T SIM-Card Switch Scam [^52]</ExploitExamples>
        <ExploitExamples>4 Surprising Ways Your Identity Can Be Stolen [^51]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Carriers</Actor>
            <Countermeasure>Carriers should be encouraged to strongly authenticate account holders before allowing account changes such as issuance of new SIM cards</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-23</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Terminal Identity Manipulation</Threat>
        
        <ThreatOrigins>3G Security; Security Threats and Requirements (Release 4) [^165]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-24</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Masquerading as a USIM or Terminal</Threat>
        
        <ThreatOrigins>3G Security; Security Threats and Requirements (Release 4) [^165]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-25</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>UICC Terminal Interface Replay Attack</Threat>
        
        <ThreatOrigins>3G Security; Security Threats and Requirements (Release 4) [^165]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-26</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Smartcard Hidden Commands</Threat>
        
        <ThreatOrigins>A Review of Smartcard Security Issues [^212]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-27</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Parameter Poisoning or Buffer Overflow</Threat>
        
        <ThreatOrigins>A Review of Smartcard Security Issues [^212]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-28</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Smartcard File Access</Threat>
        
        <ThreatOrigins>A Review of Smartcard Security Issues [^212]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-29</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Malicious Applets</Threat>
        
        <ThreatOrigins>A Review of Smartcard Security Issues [^212]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-3</ThreatID>
        <ThreatCategory>Mobile Operating System</ThreatCategory>
        <Threat>Arbitrary Code Execution via Malicious File</Threat>
        
        
        <ExploitExamples>TALOS Vulnerability Report [^215]</ExploitExamples>
        
        <CVEExamples>CVE-2016-4637</CVEExamples>
        <CVEExamples>CVE-2017-2379</CVEExamples>
        <CVEExamples>CVE-2017-2406</CVEExamples>
        <CVEExamples>CVE-2017-2407</CVEExamples>
        <CVEExamples>CVE-2017-2416</CVEExamples>
        <CVEExamples>CVE-2017-2430</CVEExamples>
        <CVEExamples>CVE-2017-2432</CVEExamples>
        <CVEExamples>CVE-2017-2435</CVEExamples>
        <CVEExamples>CVE-2017-2462</CVEExamples>
        <CVEExamples>CVE-2017-2467</CVEExamples>
        <CVEExamples>CVE-2017-2485</CVEExamples>
        <CVEExamples>CVE-2017-2487</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the probability of this variety of attack, configure devices to automatically install or, at a minimum, notify users of the availability of security updates for the mobile OS, drivers, and installed apps.</Countermeasure>
            <Countermeasure>To minimize the latency between exploit notification and the availability of security fixes, choose devices that have a reputation for providing security patches in a timely fashion.</Countermeasure>
            <Countermeasure>To minimize opportunity for this attack under a known exploit, use email filtering technologies to block attachments from untrusted domains to contain suspect file types.</Countermeasure>
            <Countermeasure>To prevent exploitation of this variety of attack under a known exploit, educate users to be suspicious of the file types in question, and when possible, avoid opening them on vulnerable devices.</Countermeasure>
            <Countermeasure>To minimize the risk of access from compromised devices, use EMM/MDM solutions in combination with devices that successfully enforce policies to block access to enterprise resources for vulnerable devices.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the probability of this variety of attack, configure devices to automatically install or, at a minimum, notify users of the availability of security updates for the mobile OS, drivers, and installed apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-30</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Communication Protocol information exchange between smartcard and terminal is dictated by a communication protocol that handles data flow control and error recovery.</Threat>
        
        <ThreatOrigins>A Review of Smartcard Security Issues [^212]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-31</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Smartcard Crypto Protocol, Design, and Implementation</Threat>
        
        <ThreatOrigins>A Review of Smartcard Security Issues [^212]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-32</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Etching</Threat>
        
        <ThreatOrigins>A Review of Smartcard Security Issues [^212]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-33</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Microscopes Analyzing Chips</Threat>
        
        <ThreatOrigins>A Review of Smartcard Security Issues [^212]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-34</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Probe Stations</Threat>
        
        <ThreatOrigins>A Review of Smartcard Security Issues [^212]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-35</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Focused Ion Beams</Threat>
        
        <ThreatOrigins>A Review of Smartcard Security Issues [^212]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-36</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Differential Power Analysis</Threat>
        
        <ThreatOrigins>A Review of Smartcard Security Issues [^212]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-37</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Power Glitching</Threat>
        
        <ThreatOrigins>A Review of Smartcard Security Issues [^212]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-38</ThreatID>
        <ThreatCategory>USIM / SIM / UICC security</ThreatCategory>
        <Threat>Pre-Shared Key Owner Data Manipulation</Threat>
        
        <ThreatOrigins>3G Security; Security Threats and Requirements (Release 4) [^165]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>STA-39</ThreatID>
        <ThreatCategory>Mobile Operating System</ThreatCategory>
        <Threat>Rooting via Hardwawre Weaknesses</Threat>
        
        <ThreatOrigins>Using Rowhammer bitflips to root Android phones is now a thing [^D-Goodin-1]</ThreatOrigins>
        
        
        <CVEExamples>CVE-2016-0823</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Ensure devices are kept up-to-date with security patches to decrease the likelihood that they can be rooted/jailbroken.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-4</ThreatID>
        <ThreatCategory>Mobile Operating System</ThreatCategory>
        <Threat>Improper OS Update Validation</Threat>
        
        <ThreatOrigins>UAE cellular carrier rolls out spyware as a 3G update [^203]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use EMM/MDM solutions in combination with devices that successfully enforce a policy to maintain a minimum OS patch level and block access to enterprise resources to non-compliant devices.</Countermeasure>
            <Countermeasure>Purchase devices from vendors/carriers who have committed to providing timely updates or who have known track records for prompt updates.</Countermeasure>
            <Countermeasure>Use EMM/MDM solutions in combination with other tools or device APIs (Android SafetyNet, Samsung Knox hardware-backed remote attestation, or other applicable remote attestation technologies) to detect and block enterprise connectivity from devices that show indications of device compromise.</Countermeasure>
            <Countermeasure>Prior to authorizing general users to install an upgrade to an untested and potentially malicious software update, evaluate the behavior of the update on test devices to determine if it appears to be free of malicious or vulnerable behaviors.</Countermeasure>
            <Countermeasure>Use devices that require updates to be signed by the device vendor.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-40</ThreatID>
        <ThreatCategory>SD Card</ThreatCategory>
        <Threat>Code Execution via SD Card Vulnerability</Threat>
        
        <ThreatOrigins>Exploiting Vulnerabilties of Wi-Fi SD cards [^S-Konstantaras-1]</ThreatOrigins>
        
        <ExploitExamples>On Hacking MicroSD Cards [^Bunnie-1]</ExploitExamples>
        
        <CVEExamples>CVE-2016-2494</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>On Android devices running 5.0 or later, do not grant access to the SD card to untrusted apps.</Countermeasure>
            <Countermeasure>Remove an attached SD card when not in use.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or containerization solutions that support policies that can restrict access to the SD card by untrusted apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-41</ThreatID>
        <ThreatCategory>SD Card</ThreatCategory>
        <Threat>Unauthorized Disclosure of SD Card Data</Threat>
        
        <ThreatOrigins>On Hacking MicroSD Cards [^248]</ThreatOrigins>
        
        <ExploitExamples></ExploitExamples>
        
        <CVEExamples>CVE-2014-7259</CVEExamples>
        <CVEExamples>CVE-2014-1566</CVEExamples>
        <CVEExamples>CVE-2014-1969</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Configure the mobile device to encrypt data stored on an attached SD card.</Countermeasure>
            <Countermeasure>If sensitive data is to be stored on or processed by an SD card, use a distinct SD card for each security context (e.g. business and personal) to limit the potential for data leakage between them via common use of an attached SD card.</Countermeasure>
            <Countermeasure>On Android devices running 5.0 or later, do not grant access to the SD card to untrusted apps.</Countermeasure>
            <Countermeasure>Remove any attached SD card when not in use.</Countermeasure>
            <Countermeasure>When not in use, secure SD cards storing sensitive data with strong physical security controls.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or containerization solutions that support policies that can enforce strong encryption on any data stored on the SD card by trusted apps</Countermeasure>
            <Countermeasure>Deploy MAM or containerization solutions that support policies that can restrict access to the SD card by untrusted apps.</Countermeasure>
            <Countermeasure>Use app-vetting services to determine if any apps present in your mobile device deployment store data on or access an SD card in an untrusted manner so appropriate policies and controls can be established to mitigate those risks.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-42</ThreatID>
        <ThreatCategory>SD Card</ThreatCategory>
        <Threat>Malicious Files Delivered from SD Card to USB-Connected Computer</Threat>
        
        <ThreatOrigins>Exploiting Smart-Phone USB Connectivity for Fun and Profit [^143]</ThreatOrigins>
        
        <ExploitExamples>Exploiting Smart-Phone USB Connectivity for Fun and Profit [^143]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Computer User</Actor>
            <Countermeasure>Configure the computer to not automatically execute content stored on mounted USB devices.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Configure the mobile device to not automatically make attached SD media available to a USB-connected computer.</Countermeasure>
            <Countermeasure>Remove any attached SD card from the mobile device prior to connecting to a computer.</Countermeasure>
            <Countermeasure>Use an anti-malware app to scan the attached SD card for malicious files prior to connecting to a computer.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-43</ThreatID>
        <ThreatCategory>Mobile Operating System</ThreatCategory>
        <Threat>Malicious App Reading Secrets from Memory</Threat>
        
        <ThreatOrigins>Project Zero: Reading privileged memory with a side-channel [^J-Horn-1]</ThreatOrigins>
        
        <ExploitExamples>Spectre Attacks: Exploiting Speculative Execution [^P-Kocher-et-al-1]</ExploitExamples>
        <ExploitExamples>Meltdown [^M-Lipp-et-al-1]</ExploitExamples>
        
        <CVEExamples>CVE-2017-5754</CVEExamples>
        <CVEExamples>CVE-2017-5753</CVEExamples>
        <CVEExamples>CVE-2017-5715</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To reduce the opportunity for an attacker to compromise the confidentiality of secrets in process memory, the memory location allocated to any secrets, such as cryptographic keys, should be explicitly overwritten as soon as its contents are no longer in use.</Countermeasure>
            <Countermeasure>To reduce the opportunity for an attacker to compromise the confidentiality of secrets in process memory, secrets (e.g. cryptographic keys) should not be read into memory until they are needed as input to computations.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the opportunity for an attacker to leverage any underlying vulnerability in the mobile OS or computing hardware, apply OS security updates in a timely fashion.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the opportunity for an attacker to leverage any underlying vulnerability in the mobile OS or computing hardware, apply OS security updates in a timely fashion.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-5</ThreatID>
        <ThreatCategory>Mobile Operating System</ThreatCategory>
        <Threat>Bypassing Code Signing Mechanisms</Threat>
        
        
        <ExploitExamples>iOS 8.4.1 Kernel Vulnerabilities in AppleHDQGasGaugeControl [^216]</ExploitExamples>
        
        <CVEExamples>CVE-2015-5839</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use EMM/MDM solutions in combination with devices that successfully enforce a policy to maintain a minimum OS patch level and block access to enterprise resources to non-compliant devices.</Countermeasure>
            <Countermeasure>Purchase devices from vendors/carriers who have committed to providing timely updates or who have known track records for prompt updates.</Countermeasure>
            <Countermeasure>Use EMM/MDM solutions in combination with other tools or device APIs (Android SafetyNet, Samsung Knox hardware-backed remote attestation, or other applicable remote attestation technologies) to detect and block enterprise connectivity from devices that show indications of device compromise.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-6</ThreatID>
        <ThreatCategory>Mobile Operating System</ThreatCategory>
        <Threat>Malicious Apps Installed via USB</Threat>
        
        <ThreatOrigins>Mobile Iron Q4 Mobile Security and Risk Review [^195]</ThreatOrigins>
        <ThreatOrigins>Government Mobile and Wireless Security Baseline [^204]</ThreatOrigins>
        
        <ExploitExamples>Injecting Malware into iOS Devices via Malicious Chargers [^217]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the probability of this attack, follow general best practices for securing systems to which a trusted mobile device may synchronize or access debugging functionality. For example, ensure the OS and applications maintain current security updates, endpoint protection software is installed, and systems are monitored for anomalous behavior.</Countermeasure>
            <Countermeasure>Consider use of Android 4.2.2 or later devices. In Android 4.2.2, connections to ADB are authenticated with an RSA keypair. This prevents unauthorized use of ADB where the attacker has physical access to a device. [^220]</Countermeasure>
            <Countermeasure>Consider the use of Android 6.0 or later, in which users must confirm to allow USB access to files, storage, or other functionality on the phone. The default behavior permits charging only. [^221]</Countermeasure>
            <Countermeasure>Consider the use of iOS 7.x or later, in which synchronization with a computer over USB that requires the device be unlocked and the user confirm an explicit trust request. Failure to establish trust permits charging only.</Countermeasure>
            <Countermeasure>Provide extra device chargers to users that plug directly into an electrical socket and encourage users to use them instead of plugging into potentially malicious USB charging stations or USB ports on potentially infected computers.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To prevent some varities of this attack, ensure ADB debugging is disabled.</Countermeasure>
            <Countermeasure>To reduce the probability of this attack, do not accept prompts to trust untrusted systems.</Countermeasure>
            <Countermeasure>Consider use of Android 4.2.2 or later devices. In Android 4.2.2, connections to ADB are authenticated with an RSA keypair. This prevents unauthorized use of ADB where the attacker has physical access to a device. [^220]</Countermeasure>
            <Countermeasure>Consider the use of Android 6.0 or later, in which users must confirm to allow USB access to files, storage, or other functionality on the phone. The default behavior permits charging only. [^221]</Countermeasure>
            <Countermeasure>Consider the use of iOS 7.x or later, in which synchronization with a computer over USB that requires the device be unlocked and the user confirm an explicit trust request. Failure to establish trust permits charging only.</Countermeasure>
            <Countermeasure>Provide extra device chargers to users that plug directly into an electrical socket and encourage users to use them instead of plugging into potentially malicious USB charging stations or USB ports on potentially infected computers.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-7</ThreatID>
        <ThreatCategory>Mobile Operating System</ThreatCategory>
        <Threat>Malicious Configuration Profiles</Threat>
        
        <ThreatOrigins>Malicious Profiles - The Sleeping Giant of iOS Security [^205]</ThreatOrigins>
        <ThreatOrigins>Mobile Threat Protection: A Holistic Approach to Securing Mobile Data and Devices [^61]</ThreatOrigins>
        <ThreatOrigins>Symantec Internet Security Threat Report 2016 [^110]</ThreatOrigins>
        
        <ExploitExamples>Threat Advisory Semi Jailbreak [^218]</ExploitExamples>
        <ExploitExamples>YiSpecter: First iOS Malware That Attacks Non-jailbroken Apple iOS Devices by Abusing Private APIs [^43]</ExploitExamples>
        <ExploitExamples>iOS SideStepper Vulnerability Undermines MDM Services: Check Point [^44]</ExploitExamples>
        <ExploitExamples>Apple iPhone, iPad iOS 9 security flaw lets malicious apps sneak onto enterprise devices [^45]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent attackers from creating counterfeit management profiles by signing them with stolen enterprise certificates, ensure strong security measures are used to protect both enterprise access to trusted certificate services (e.g., VeriSign) and any obtained certficates (e.g. MDM server certificates, Apple Push Notification Services certificates).</Countermeasure>
            <Countermeasure>To prevent a device from accepting a malicious management profile after enrollment, use EMM/MDM solutions in combination with devices that properly verify the integrity and authenticity of device management profiles prior to their application, such as by using digitally-signed profiles.</Countermeasure>
            <Countermeasure>To prevent users from accepting prompts to install malicious management profiles, educate users about the risks associated with installing an untrusted profile and ensure that enrollment processes allow users to know when management profiles are legitimate (e.g., in-person enrollment, or secure out-of-band deployment methods such as digitally-signed or encrypted e-mails.</Countermeasure>
            <Countermeasure>To prevent users from installing malicious digital certificates, which can be used to greatly facilitate this form of attack, educate users about the risks associated with installing digital certifications, and ensure that installation processes allow users to know when digital certificates are legitimate (e.g., in-person enrollment, or secure out-of-band deployment methods such as digitally-signed or encrypted e-mails).</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-8</ThreatID>
        <ThreatCategory>Mobile Operating System</ThreatCategory>
        <Threat>Services Requiring Insecure Configuration</Threat>
        
        
        <ExploitExamples>Android: Third-party app stores (whether for enterprise or personal use) that require user to weaken device security posture by enabling installation of apps from unknown sources.</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>For Android devices, to reduce the duration of this threat, when needing to install app not available from the Google Play Store (e.g., in-house enterprise app), only enable the __Unknown Sources__ option in __Settings &gt; Security__ menu for as long as necessary to complete installation of the 3rd party app; disable it when installation is complete.</Countermeasure>
            <Countermeasure>To reduce the probability that an attacker exploits the reduced security posture to install unauthorized apps on the device, while **Unknown Sources** is enabled, perform enterprise app installation while connected to trusted and secure Wi-Fi networks, or at a minimum, over a VPN connection to a secured enterprise network.</Countermeasure>
            <Countermeasure>To reduce the probability that an attacker exploits the reduced security posture to install unauthorized apps on the device, while __Unknown Sources__ is enabled, limit device activity to installing trusted enterprise applications through trusted channels (e.g., enterprise app store). Web pages, e-mails, SMS/MMS messages, and NFC/RFID tags can all present (and potentially automatically access) URLs to malicious apps that would normally blocked from installation.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>STA-9</ThreatID>
        <ThreatCategory>Device Drivers</ThreatCategory>
        <Threat>Device Driver or Firmware Software Exploit</Threat>
        
        <ThreatOrigins>Android Security Bulletin June 2016 [^206]</ThreatOrigins>
        
        <ExploitExamples>Broadpwn: Remotely Compromising Android and iOS via a bug in the Broadcom's Wi-Fi Chipset [^Artenstein-1]</ExploitExamples>
        
        <CVEExamples>CVE-2016-10231</CVEExamples>
        <CVEExamples>CVE-2016-10236</CVEExamples>
        <CVEExamples>CVE-2016-10240</CVEExamples>
        <CVEExamples>CVE-2016-10241</CVEExamples>
        <CVEExamples>CVE-2016-10278</CVEExamples>
        <CVEExamples>CVE-2016-10279</CVEExamples>
        <CVEExamples>CVE-2016-2066</CVEExamples>
        <CVEExamples>CVE-2016-2469</CVEExamples>
        <CVEExamples>CVE-2016-2474</CVEExamples>
        <CVEExamples>CVE-2016-2490</CVEExamples>
        <CVEExamples>CVE-2016-2491</CVEExamples>
        <CVEExamples>CVE-2016-5346</CVEExamples>
        <CVEExamples>CVE-2017-0325</CVEExamples>
        <CVEExamples>CVE-2017-0329</CVEExamples>
        <CVEExamples>CVE-2017-0339</CVEExamples>
        <CVEExamples>CVE-2017-0454</CVEExamples>
        <CVEExamples>CVE-2017-046</CVEExamples>
        <CVEExamples>CVE-2017-056</CVEExamples>
        <CVEExamples>CVE-2017-0561</CVEExamples>
        <CVEExamples>CVE-2017-0562</CVEExamples>
        <CVEExamples>CVE-2017-0565</CVEExamples>
        <CVEExamples>CVE-2017-0566</CVEExamples>
        <CVEExamples>CVE-2017-0567</CVEExamples>
        <CVEExamples>CVE-2017-0569</CVEExamples>
        <CVEExamples>CVE-2017-057</CVEExamples>
        <CVEExamples>CVE-2017-057</CVEExamples>
        <CVEExamples>CVE-2017-0570</CVEExamples>
        <CVEExamples>CVE-2017-0571</CVEExamples>
        <CVEExamples>CVE-2017-0572</CVEExamples>
        <CVEExamples>CVE-2017-0575</CVEExamples>
        <CVEExamples>CVE-2017-0579</CVEExamples>
        <CVEExamples>CVE-2017-058</CVEExamples>
        <CVEExamples>CVE-2017-058</CVEExamples>
        <CVEExamples>CVE-2017-0584</CVEExamples>
        <CVEExamples>CVE-2017-0585</CVEExamples>
        <CVEExamples>CVE-2017-6424</CVEExamples>
        <CVEExamples>CVE-2017-6425</CVEExamples>
        <CVEExamples>CVE-2017-6975</CVEExamples>
        <CVEExamples>CVE-2017-9417</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use EMM/MDM solutions in combination with devices that successfully enforce a policy to maintain a minimum OS patch level and block access to enterprise resources to non-compliant or devices with known-exploitable vulnerabilities.</Countermeasure>
            <Countermeasure>Purchase devices from vendors/carriers who have committed to providing timely updates or have good track records for providing prompt security updates.</Countermeasure>
            <Countermeasure>Use EMM/MDM solutions in combination with other tools or device APIs (Android SafetyNet, Samsung Knox hardware-backed remote attestation, or other applicable remote attestation technologies) to detect and block enterprise connectivity from devices that show indications of device compromise.</Countermeasure>
            <Countermeasure>To reduce the probability an exploit for a driver for a peripheral or OS-provided service that can be disabled via device management APIs, use EMM/MDM solutions in combination with devices that successfully enforces a policy to disable unauthorized resources, including temporarily disabling known-vulnerable resources until a security patch is available.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the probability an exploit for a driver for an access-controlled peripheral or OS-provided service (e.g., camera, microphone), use OS configuration settings to disable or block access to these resources, with a preference for global settings (e.g., disabling NFC device-wide) over app-specific permissions.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-0</ThreatID>
        <ThreatCategory>Cellular Air Interface</ThreatCategory>
        <Threat>Air Interface Eavesdropping</Threat>
        
        <ThreatOrigins>3G Security: Security Threats and Requirements (Release 4) [^165]</ThreatOrigins>
        <ThreatOrigins>LTE Architecture Overview and Security Analysis (Draft NISTIR 8071) [^166]</ThreatOrigins>
        
        <ExploitExamples>Attacking phone privacy [^175]</ExploitExamples>
        <ExploitExamples>A man-in-the-middle attack on UMTS [^176]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Original Equipment Manufacturer</Actor>
            <Countermeasure>Use of a ciphering indicator in the interface of the mobile device to inform the user as to whether or not user data (e.g. voice calls, SMS/MMS messages, data) are being encrypted.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile OS Developer</Actor>
            <Countermeasure>Use of a ciphering indicator in the interface of the mobile device to inform the user as to whether or not user data (e.g. voice calls, SMS/MMS messages, data) are being encrypted.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>Network level air interface encryption for user-plane traffic.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To prevent an attacker who intercepts traffic on the unencrypted channel between a mobile device and a base station, use a mobile VPN or another third-party over-the-top encryption solution to encrypt data prior to transmission over the air interface.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent an attacker who intercepts traffic on the unencrypted channel between a mobile device and a base station, use a mobile VPN or another third-party over-the-top encryption solution to encrypt data prior to transmission over the air interface.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-1</ThreatID>
        <ThreatCategory>Cellular Air Interface</ThreatCategory>
        <Threat>Cryptanalysis of Air Interface Traffic</Threat>
        
        <ThreatOrigins>GSM Sniffing [^173]</ThreatOrigins>
        
        <ExploitExamples>GSM Sniffing [^173]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Original Equipment Manufacturer</Actor>
            <Countermeasure>Where possible, prefer the use of modern air interface technologies to ensure stronger cryptographic algorithms are used.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-10</ThreatID>
        <ThreatCategory>Consumer-grade Femtocell</ThreatCategory>
        <Threat>Use of weaker, nonstandard handset authentication mechanism for consumer-grade femtocells</Threat>
        
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-11</ThreatID>
        <ThreatCategory>Consumer-grade Femtocell</ThreatCategory>
        <Threat>Rooted Femtocell Eavesdropping</Threat>
        
        <ThreatOrigins>I Can Hear You Now: Traffic Interception and Remote Mobile Phone Cloning with a Compromised CDMA Femtocell [^180]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To increase detection of compromised devices, use small cells implemented with secure boot technologies.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>To increase detection of compromised devices, use small cells implemented with secure boot technologies.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-12</ThreatID>
        <ThreatCategory>Consumer-grade Femtocell</ThreatCategory>
        <Threat>Masquerading</Threat>
        
        <ThreatOrigins>3G Security: Security Threats and Requirements (Release 4) [^165]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-13</ThreatID>
        <ThreatCategory>VoLTE</ThreatCategory>
        <Threat>Downgrade via Circuit Switched Fallback (CSFB)</Threat>
        
        <ThreatOrigins>Insecurity of Voice Solution VoLTE in LTE Mobile Networks [^170]</ThreatOrigins>
        <ThreatOrigins>How Voice Call Technology Poses Security Threats in 4G LTE Networks [^181]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-14</ThreatID>
        <ThreatCategory>VoLTE</ThreatCategory>
        <Threat>Covert VoLTE Channels</Threat>
        
        <ThreatOrigins>Insecurity of Voice Solution VoLTE in LTE Mobile Networks [^170]</ThreatOrigins>
        <ThreatOrigins>How Voice Call Technology Poses Security Threats in 4G LTE Networks [^181]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-15</ThreatID>
        <ThreatCategory>VoLTE</ThreatCategory>
        <Threat>VoLTE Data Injection</Threat>
        
        <ThreatOrigins>Insecurity of Voice Solution VoLTE in LTE Mobile Networks [^170]</ThreatOrigins>
        <ThreatOrigins>How Voice Call Technology Poses Security Threats in 4G LTE Networks [^181]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-16</ThreatID>
        <ThreatCategory>VoLTE</ThreatCategory>
        <Threat>Unauthorized QoS Indicator Modification</Threat>
        
        <ThreatOrigins>Insecurity of Voice Solution VoLTE in LTE Mobile Networks [^170]</ThreatOrigins>
        <ThreatOrigins>How Voice Call Technology Poses Security Threats in 4G LTE Networks [^181]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-17</ThreatID>
        <ThreatCategory>SMS / MMS / RCS</ThreatCategory>
        <Threat>SMS-induced DoS</Threat>
        
        <ThreatOrigins>Attacking SMS [^182]</ThreatOrigins>
        
        <ExploitExamples>Beware of the Text Massage That Crashes iPhones [^183]</ExploitExamples>
        
        <CVEExamples>CVE-2015-1157</CVEExamples>
        
    </row>
    
    <row>
        <ThreatID>CEL-18</ThreatID>
        <ThreatCategory>SMS / MMS / RCS</ThreatCategory>
        <Threat>Phone Call Eavesdropping</Threat>
        
        
        <ExploitExamples>Researchers exploit cellular tech flaws to intercept phone calls [^168]</ExploitExamples>
        
        
    </row>
    
    <row>
        <ThreatID>CEL-19</ThreatID>
        <ThreatCategory>SMS / MMS / RCS</ThreatCategory>
        <Threat>Message Injection</Threat>
        
        <ThreatOrigins>Mitigating Attacks on Open Functionality in SMS-Capable Cellular Networks [^184]</ThreatOrigins>
        <ThreatOrigins>Attacking SMS [^182]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-2</ThreatID>
        <ThreatCategory>Cellular Air Interface</ThreatCategory>
        <Threat>Device and Identity Tracking via Rogue Base station</Threat>
        
        <ThreatOrigins>3G Security: Security Threats and Requirements (Release 4) [^165]</ThreatOrigins>
        <ThreatOrigins>LTE Architecture Overview and Security Analysis [^166]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To increase the complexity of tracking a device over a longer term (e.g., following consecutive hand-offs), use devices that generate temporary device identities.</Countermeasure>
            <Countermeasure>To reduce the amount of high-quality data an attacker can use to track a device, employ methods of rogue base station detection</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Original Equipment Manufacturer</Actor>
            <Countermeasure>To reduce the amount of high-quality data an attacker can use to track a device, employ methods of rogue base station detection</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-20</ThreatID>
        <ThreatCategory>SMS / MMS / RCS</ThreatCategory>
        <Threat>Device Fingerprinting via SMS</Threat>
        
        <ThreatOrigins>A Silent SMS Denial of Service (DoS) Attack [^185]</ThreatOrigins>
        <ThreatOrigins>Attacking SMS [^182]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-21</ThreatID>
        <ThreatCategory>SMS / MMS / RCS</ThreatCategory>
        <Threat>Silent Message DoS</Threat>
        
        <ThreatOrigins>A Silent SMS Denial of Service (DoS) Attack [^185]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-22</ThreatID>
        <ThreatCategory>SMS / MMS / RCS</ThreatCategory>
        <Threat>SMS Parser RCE</Threat>
        
        
        
        <CVEExamples>CVE-2015-6602</CVEExamples>
        
    </row>
    
    <row>
        <ThreatID>CEL-23</ThreatID>
        <ThreatCategory>USSD</ThreatCategory>
        <Threat>Traffic Eavesdropping</Threat>
        
        <ThreatOrigins>Zimperium zLabs is Raising the Volume: New Vulnerability Processing MP3/MP4 Media [^186]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>Network level air interface encryption for user-plane traffic.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-24</ThreatID>
        <ThreatCategory>USSD</ThreatCategory>
        <Threat>Modification of Requests and Responses in Transit</Threat>
        
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>Network level air interface encryption for user plane traffic.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-25</ThreatID>
        <ThreatCategory>USSD</ThreatCategory>
        <Threat>Unauthorized USSD Code Autodial</Threat>
        
        
        <ExploitExamples>Dirty USSD Code Could Automatically Wipe Your Samsung TouchWize Device (Updated) [^187]</ExploitExamples>
        <ExploitExamples>Remote USSD Code Execution on Android Devices [^188]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprises</Actor>
            <Countermeasure>Choose devices without a USSD software stack.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Choose devices without a USSD software stack.</Countermeasure>
            <Countermeasure>Choose devices that will not execute USSD codes without user confirmation.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Choose devices that will not execute USSD codes without user confirmation.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-26</ThreatID>
        <ThreatCategory>Carrier Infrastructure</ThreatCategory>
        <Threat>Voicemail Hacking via Default PIN</Threat>
        
        <ThreatOrigins>Safe Use of Mobile Devices and the Internet [^171]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Ensure that a new PIN is set on voicemail accounts.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Ensure that a new PIN is set on voicemail accounts.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-27</ThreatID>
        <ThreatCategory>Carrier Infrastructure</ThreatCategory>
        <Threat>No validation or authentication of caller ID information</Threat>
        
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-28</ThreatID>
        <ThreatCategory>Carrier Infrastructure</ThreatCategory>
        <Threat>Backhaul and Core Eavesdropping</Threat>
        
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>Ensure Confidentiality Protection of S1 Interface</Countermeasure>
            <Countermeasure>Encrypt Exposed Interfaces Between Core Network Components</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To mitigate the impact of eavesdropping on an unencrypted backhaul or core network communications channel, employ over-the-top encryption services to user-plane data prior to transmission off the mobile device.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To mitigate the impact of eavesdropping on an unencrypted backhaul or core network communications channel, employ over-the-top encryption services to user-plane data prior to transmission off the mobile device.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-29</ThreatID>
        <ThreatCategory>Carrier Infrastructure</ThreatCategory>
        <Threat>Preshared Key Theft</Threat>
        
        <ThreatOrigins>LTE Architecture Overview and Security Analysis (Draft NISTIR 8071) [^166]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>Ensure that baseline industry recommended practices are implemented and validated</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-3</ThreatID>
        <ThreatCategory>Cellular Air Interface</ThreatCategory>
        <Threat>Downgrade Attacks via Rogue Base station</Threat>
        
        <ThreatOrigins>3G Security: Security Threats and Requirements (Release 4) [^165]</ThreatOrigins>
        <ThreatOrigins>LTE Architecture Overview and Security Analysis (Draft NISTIR 8017) [^166]</ThreatOrigins>
        <ThreatOrigins>LTE Security and Protocol Exploits [^167]</ThreatOrigins>
        
        <ExploitExamples>Researchers exploit cellular tech flaws to intercept phone calls [^168]</ExploitExamples>
        <ExploitExamples>Every LTE call, text, can be intercepted, blacked out, hacker finds [^247]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Original Equipment Manufacturer</Actor>
            <Countermeasure>Ensure baseband firmware prevents the use of insecure cellular encryption algorithms</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>Use of application layer encryption technologies</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-30</ThreatID>
        <ThreatCategory>Carrier Infrastructure</ThreatCategory>
        <Threat>Unauthorized OAM Network Access</Threat>
        
        <ThreatOrigins>LTE Architecture Overview and Security Analysis (Draft NISTIR 8071) [^166]</ThreatOrigins>
        
        <ExploitExamples>Attacking BaseStations - an Odyssey through a Telco's Network [^177]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>Use of strong passwords</Countermeasure>
            <Countermeasure>Properly wipe and dispose of old network equipment</Countermeasure>
            <Countermeasure>Ensure that baseline industry recommended practices for information system security are implemented and validated</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-31</ThreatID>
        <ThreatCategory>Carrier Infrastructure</ThreatCategory>
        <Threat>Physical Attacks on Network Infrastructure</Threat>
        
        <ThreatOrigins>LTE Architecture Overview and Security Analysis (Draft NISTIR 8071) [^166]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>Implement industry standard physical security mitigations</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-32</ThreatID>
        <ThreatCategory>Carrier Infrastructure</ThreatCategory>
        <Threat>Malware Attacks on Base Station Infrastructure</Threat>
        
        <ThreatOrigins>LTE Architecture Overview and Security Analysis (Draft NISTIR 8071) [^166]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>Ensure that baseline industry recommended practices are implemented and validated</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-33</ThreatID>
        <ThreatCategory>Carrier Infrastructure</ThreatCategory>
        <Threat>Malware Attacks on Core Infrastructure</Threat>
        
        <ThreatOrigins>LTE Architecture Overview and Security Analysis (Draft NISTIR 8071) [^166]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>Ensure that baseline industry recommended practices are implemented and validated</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-34</ThreatID>
        <ThreatCategory>Carrier Infrastructure</ThreatCategory>
        <Threat>User Impersonation</Threat>
        
        <ThreatOrigins>3G Security: Security Threats and Requirements (Release 4) [^165]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-35</ThreatID>
        <ThreatCategory>Carrier Infrastructure</ThreatCategory>
        <Threat>Traffic Interception via Masquerading</Threat>
        
        <ThreatOrigins>3G Security: Security Threats and Requirements (Release 4) [^165]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-36</ThreatID>
        <ThreatCategory>Carrier Infrastructure</ThreatCategory>
        <Threat>Unauthorized Phone Call and SMS Rerouting</Threat>
        
        <ThreatOrigins>3G Security: Security Threats and Requirements (Release 4) [^165]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-37</ThreatID>
        <ThreatCategory>Carrier Interoperability</ThreatCategory>
        <Threat>Monitor or Redirection of Phone Calls and SMS via SS7 Exploit</Threat>
        
        <ThreatOrigins>SCTPscan - Finding Entry Points to SS7 Networks &amp; Telecommunication Backbones [^172]</ThreatOrigins>
        <ThreatOrigins>GSM Sniffing [^173]</ThreatOrigins>
        <ThreatOrigins>Toward the HLR: Attacking the SS7 &amp; SIGTRAN Applications [^174]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>SS7 Firewalls may be deployed throughout the network. See Securing SS7 Telecommunications Networks [^191]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-38</ThreatID>
        <ThreatCategory>Carrier Interoperability</ThreatCategory>
        <Threat>Obtaining Device Location via SS7 Exploit</Threat>
        
        <ThreatOrigins>SCTPscan - Finding Entry Points to SS7 Networks &amp; Telecommunication Backbones [^172]</ThreatOrigins>
        <ThreatOrigins>GSM Sniffing [^173]</ThreatOrigins>
        <ThreatOrigins>Toward the HLR: Attacking the SS7 &amp; SIGTRAN Applications [^174]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>SS7 Firewalls may be deployed throughout the network. See Securing SS7 Telecommunications Networks [^191]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-39</ThreatID>
        <ThreatCategory>Carrier Interoperability</ThreatCategory>
        <Threat>Device Location Tracking</Threat>
        
        <ThreatOrigins>Mobile Self Defense [^189]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-4</ThreatID>
        <ThreatCategory>Cellular Air Interface</ThreatCategory>
        <Threat>Preventing Emergency Phone Calls via Rogue Base station</Threat>
        
        <ThreatOrigins>3G Security: Security Threats and Requirements (Release 4) [^165]</ThreatOrigins>
        <ThreatOrigins>LTE Architecture Overview and Security Analysis (Draft NISTIR 8071) [^166]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Original Equipment Manufacturer</Actor>
            <Countermeasure>Implement rogue base station detection.</Countermeasure>
            <Countermeasure>Use bandband firmware that does not connect to a base station unless it has been verified as a legitimate device operated as part of a trusted mobile network.</Countermeasure>
            <Countermeasure>Use baseband firmware that does not support deprecated communciation protocols that are more vulnerable to attack (e.g., 2G or 3G connections).</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-40</ThreatID>
        <ThreatCategory>Carrier Interoperability</ThreatCategory>
        <Threat>Device Information Leak</Threat>
        
        <ThreatOrigins>Mobile Self Defense [^189]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-41</ThreatID>
        <ThreatCategory>Carrier Interoperability</ThreatCategory>
        <Threat>SMS Spam</Threat>
        
        <ThreatOrigins>Mobile Self Defense [^189]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-42</ThreatID>
        <ThreatCategory>Carrier Interoperability</ThreatCategory>
        <Threat>Redirect, Duplicate, or Eavesdrop on Phone Calls</Threat>
        
        <ThreatOrigins>Mobile Self Defense [^189]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-43</ThreatID>
        <ThreatCategory>Carrier Interoperability</ThreatCategory>
        <Threat>Air Interface Traffic Decryption</Threat>
        
        <ThreatOrigins>Mobile Self Defense [^189]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>CEL-5</ThreatID>
        <ThreatCategory>Cellular Air Interface</ThreatCategory>
        <Threat>Incomplete Attach Procedure via Rogue Base station</Threat>
        
        <ThreatOrigins>LTE Architecture Overview and Security Analysis (Draft NISTIR 8071) [^166]</ThreatOrigins>
        <ThreatOrigins>LTE Security and Protocol Exploits [^167]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Ensure that the behavior of a mobile device's chipset in these conditions is understood before relying on cellular communication in critical situations.</Countermeasure>
            <Countermeasure>In anticipation of a potential denial-of-service attack on the air interface of devices, establish contingency plans for continued operations, such as use of alternative communication channels.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Baseband Developer</Actor>
            <Countermeasure>Ensure that the behavior of a mobile device's chipset in these conditions is understood before relying on cellular communication in critical situations.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-6</ThreatID>
        <ThreatCategory>Cellular Air Interface</ThreatCategory>
        <Threat>Call / Data Eavesdropping via Compromised Small Cell</Threat>
        
        <ThreatOrigins>Researchers exploit cellular tech flaws to intercept phone calls [^168]</ThreatOrigins>
        <ThreatOrigins>LTE Architecture Overview and Security Analysis (Draft NISTIR 8071) [^166]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use applications that strongly encrypt data prior to transmission of data over cellular interfaces.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-7</ThreatID>
        <ThreatCategory>Cellular Air Interface</ThreatCategory>
        <Threat>Jamming Device Radio Interface</Threat>
        
        <ThreatOrigins>Analysis and Mitigation of Interference to the LTE Physical Control Format Indicator Channel [^169]</ThreatOrigins>
        <ThreatOrigins>Researchers exploit cellular tech flaws to intercept phone calls [^168]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Detect, locate and deactivate the device interfering with the radio interface.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Detect, locate and deactivate the device interfering with the radio interface.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>Detect, locate and deactivate the device interfering with the radio interface.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-8</ThreatID>
        <ThreatCategory>Cellular Air Interface</ThreatCategory>
        <Threat>Jamming Base Station Radio Interface</Threat>
        
        <ThreatOrigins>LTE Architecture Overview and Security Analysis (Draft NISTIR 8071) [^166]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Network Operator</Actor>
            <Countermeasure>Detect, locate, and deactivate the device causing interference with the base station radio interface.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>CEL-9</ThreatID>
        <ThreatCategory>Cellular Air Interface</ThreatCategory>
        <Threat>Theft of Preshared Keys Stored in UICC SIM</Threat>
        
        <ThreatOrigins>LTE Architecture Overview and Security Analysis (Draft NISTIR 8071) [^166]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Original Equipment Manufacturer</Actor>
            <Countermeasure>Ensure that baseline industry recommended practices are implemented and validated</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-0</ThreatID>
        <ThreatCategory>Mobile OS &amp; Vendor Infrastructure</ThreatCategory>
        <Threat>Exploitation of PC Backups</Threat>
        
        
        <ExploitExamples>BackStab: Mobile Backup Data Under Attack from Malware [^192]</ExploitExamples>
        <ExploitExamples>iOS 10: Security Weakness Discovered, Backup Passwords Much Easier to Break [^O-Afonin-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>As knowledge of the authentication credentials for any associated account (e.g., iTunes, Google) may facilitate an attacker's ability to initiate, access, or decrypt device backups, follow best practices for management of device account passwords.</Countermeasure>
            <Countermeasure>To detect malware that may realize this threat against device backups to a trusted computer, ensure up-to-date anti-malware software is configured to regularly scan for malicious files and application behavior.</Countermeasure>
            <Countermeasure>To prevent this threat for backups to a trusted computer, configure any device backup software (e.g., iTunes) to encrypt all device backups. Furthermore, securely erase any unencrypted backups that may already exist.</Countermeasure>
            <Countermeasure>To prevent a device from being inadvertently backed up to an computer under an attacker's control, when charging the device, do not grant trust to an untrusted computer or charging station.</Countermeasure>
            <Countermeasure>To prevent an attacker from directly initiating an unauthorized device backup to a controlled computer, ensure a device unlock code has been configured for the device and that the device is left in a locked state when being left unattended.</Countermeasure>
            <Countermeasure>To further prevent an attacker from directly initiating an unauthorized device backup to a controlled computer, use strong physical security measures (e.g., lock the device into a secure container) when leaving a device directly unattended.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To detect malware that may realize this threat against device backups to a trusted computer, ensure up-to-date anti-malware software is configured to regularly scan for malicious files and application behavior.</Countermeasure>
            <Countermeasure>To prevent this threat for all backups of managed devices, deploy EMM/MDM solutions in combination with devices that successfully enforce policies to either encrypt all device backups or to block device backups entirely, as appropriate.</Countermeasure>
            <Countermeasure>To prevent this threat for enterprise data contained in backups of managed devices, deploy EMM/MDM/container solutions in combination with devices that successfully enforce policies to either encrypt all enterprise data, or block enterprise data from being included in device backups.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-1</ThreatID>
        <ThreatCategory>Mobile OS &amp; Vendor Infrastructure</ThreatCategory>
        <Threat>Unauthorized Access to Cloud Backups</Threat>
        
        
        <ExploitExamples>Elcomsoft Phone Breaker [^194]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To prevent an attacker from realizing this threat, disable or do not enable cloud backups for the device, which can be accomplished either through mobile OS settings or for enterprises, MDM device policy settings.</Countermeasure>
            <Countermeasure>To increase the difficulty of an attacker gaining access to a cloud service account, enable increased authentication requirements, such as two-factor authentication or step-up authentication when initally accessing the account from an unknown device.</Countermeasure>
            <Countermeasure>Some tools used to access cloud-based device backups leverage cryptographic tokens left on computers or devices used to legitimately access the cloud service (e.g., iCloud); if it is believed an attacker has had access to any such system, invalidate any recovered tokens they may have recovered by changing the authentication credentials for the cloud service.</Countermeasure>
            <Countermeasure>As knowledge of the authentication credentials for a cloud-based backup service may enable an attacker to gain access, protect cloud service authentication credentials from unauthorized disclosure.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent an attacker from realizing this threat, disable or do not enable cloud backups for the device, which can be accomplished either through mobile OS settings or for enterprises, MDM device policy settings.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-10</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>Compromise leading to distribution of rogue / malicious applications</Threat>
        
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To decrease the probability that unvetted apps are malicious, prohibit users from sideloading apps or downloading apps from unofficial and unauthorized app stores</Countermeasure>
            <Countermeasure>Use app threat intelligence data to identify malicious applications unknowingly distributed through official or unofficial application stores.</Countermeasure>
            <Countermeasure>Use features such as Apple iOS Managed Apps, Android for Work, or Samsung KNOX Workspace that provide some level of separation between personal apps and enterprise apps to mitigate the impact of malicious behaviors.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to determine if enterprise applications appear free of malicious behaviors before authorizing their installation.</Countermeasure>
            <Countermeasure>Host vetted apps within a locally controlled repository of an application store, such as F-Droid [^158]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-11</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>Redirect Genuine URL to Malicious Application</Threat>
        
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To decrease the time to detection of malicious apps, use app threat intelligence data to identify malicious apps.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to determine if apps acquired from even official or authorized app stores appear free of malicious or vulnerable behaviors of apps prior to authorizing their use.</Countermeasure>
            <Countermeasure>Use features such as Apple iOS Managed Apps, Android for Work, or Samsung KNOX Workspace that provide additional separation between personal apps and enterprise apps to mitigate the impact of malicious behaviors.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-12</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>Man in the Middle Attack on Application Download</Threat>
        
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To decrease the time to detection, use app threat intelligence data to identify malicious applications installed on devices</Countermeasure>
            <Countermeasure>Use features such as Apple iOS Managed Apps, Android for Work, or Samsung KNOX Workspace that provide additional separation between personal apps and enterprise apps to mitigate the impact of malicious behaviors.</Countermeasure>
            <Countermeasure>To reduce the probability that an attacker will have established a MiTM on a session during which a user attempts to intall apps from a trusted source (e.g., official app store), recommend or require users to download apps when connected to a trusted and secured Wi-Fi network.</Countermeasure>
            <Countermeasure>To reduce the probability that malicious apps will be installed on managed devices, use app-vetting tools or services in combination with MAM solutions to push vetted apps directly onto enrolled devices over trusted and secured Wi-Fi networks.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-13</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>Use of links or NFC tags, QR codes, or other distribution channels (e.g., sms, email) to point to malicious apps</Threat>
        
        <ThreatOrigins>http://netsecurity.about.com/od/securityadvisorie1/a/How-To-Protect-Yourself-From-Malicious-QR-Codes.htm</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor></Actor>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor></Actor>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor></Actor>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-14</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>Application Store Infrastructure Attack</Threat>
        
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent users from acquiring fraudulent versions of in-demand legitimate apps that are typically available from authorized app stores, prohibit side-loading or installing apps from unauthorized app stores</Countermeasure>
            <Countermeasure>To ensure the availability of enterprise apps typically available from official app stores (e.g., Google Play), create a locally controlled repository of an application store such as F-Droid [^158]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-15</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>Enterprise App Store Compromise</Threat>
        
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use solutions such as Google Play Private Channel or Apple's Developer Enterprise program to securely distribute private applications.</Countermeasure>
            <Countermeasure>To limit the distribution of sensitive enterprise apps outside of authorized mobile devices, use MAM solutions to push private apps directly onto authorized and enrolled devices.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To prevent the unauthorized disclosure of secrets within private enterprise apps, do not hardcode secrets, such as cryptographic keys, directly into private enterprise applications.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Application Developer</Actor>
            <Countermeasure>To prevent unauthorized access to private enterprise apps from further granting unauthorized access to sensitive data, require the user of a mobile app to pass strong authentication mechanisms prior to granting access to sensitive data.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-16</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>Modify or Replace Deployed App</Threat>
        
        <ThreatOrigins>Keep out hijackers: Secure your app store dev account [^150]</ThreatOrigins>
        
        <ExploitExamples>Major security hole allows Apple passwords to be reset with only email address, date of birth (update) [^152]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use app-vetting tools or services to determine that apps appear free of malicious behaviors or vulnerabilities prior to authorizing their use.</Countermeasure>
            <Countermeasure>To decrease the time to detection for malicious apps, use app threat intelligence services to detect malicious apps installed on devices</Countermeasure>
            <Countermeasure>Educate end users to scrutinize the permissions requested by apps, particularly if an updated version requests significantly different permissions than previous ones.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To reduce the potential for an attacker to impersonate you to official apps stores, follow best practices to protect your developer accounts, such as using multi-factor authentication. [^159] [^160]</Countermeasure>
            <Countermeasure>To reduce the potential for an attacker to craft malicious apps that validate against your developer account, follow best practices to protect cryptographic signing material for applications [^162]</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To decrease the time to detection for malicious apps, use Android Verify Apps feature.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-17</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>Sign and Distribute Malicious App</Threat>
        
        <ThreatOrigins>Keep out hijackers: Secure your app store dev account [^150]</ThreatOrigins>
        
        <ExploitExamples>Major security hole allows Apple passwords to be reset with only email address, date of birth (update) [^152]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use app-vetting tools or services to determine that apps appear free of malicious behaviors or vulnerabilities prior to authorizing their use.</Countermeasure>
            <Countermeasure>To decrease the time to detection for malicious apps, use app threat intelligence services to detect malicious apps installed on devices</Countermeasure>
            <Countermeasure>Educate end users to scrutinize the permissions requested by apps, particularly if an updated version requests significantly different permissions than previous ones.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To reduce the potential for an attacker to impersonate you to official apps stores, follow best practices to protect your developer accounts, such as using multi-factor authentication. [^159] [^160]</Countermeasure>
            <Countermeasure>To reduce the potential for an attacker to craft malicious apps that validate against your developer account, follow best practices to protect cryptographic signing material for applications [^162]</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To decrease the time to detection for malicious apps, use Android Verify Apps feature.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-18</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>Remove App From App Store</Threat>
        
        <ThreatOrigins>Keep out hijackers: Secure your app store dev account [^150]</ThreatOrigins>
        
        <ExploitExamples>Major security hole allows Apple passwords to be reset with only email address, date of birth (update) [^152]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To reduce the potential for an attacker to impersonate you to official apps stores, follow best practices to protect your developer accounts, such as using multi-factor authentication. [^159] [^160]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-19</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>Bring the app store offline by attacking the hosting infrastructure</Threat>
        
        
        
        
    </row>
    
    <row>
        <ThreatID>ECO-2</ThreatID>
        <ThreatCategory>Mobile OS &amp; Vendor Infrastructure</ThreatCategory>
        <Threat>Exploitation of Cloud Backups</Threat>
        
        <ThreatOrigins>Mobile Security: Threats and Countermeasures [^90]</ThreatOrigins>
        
        <ExploitExamples>Q4 Mobile Security and Risk Review [^195]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent sensitive app data from unknowingly being backed-up to unauthorized or unsecure cloud services, analyze app data storage practices as part of the app vetting process prior to authorizing apps for use.</Countermeasure>
            <Countermeasure>To protect the confidentiality of app data backed-up to a cloud service, prefer the use of FedRAMP-certified cloud service providers to gain assurance that app data backed-up to the cloud is strongly encrypted.</Countermeasure>
            <Countermeasure>To prevent an attacker from gaining access to app data backups via the cloud service account, enable two-factor or other strong authentication mechanisms.</Countermeasure>
            <Countermeasure>To protect the confidentiality of app data backed-up to a cloud service, deploy MAM or MDM solutions in combinations with devices that successfully enforce a policy to strongly encrypt app data backed-up or synchronized to authorized cloud services.</Countermeasure>
            <Countermeasure>To prevent sensitive app data from being backed-up to an untrusted cloud service, deploy MAM or MDM solutions in combination with devices that successfully enforce a policy that prohibits app data from being synchronized or backed-up to any cloud services.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To prevent an attacker from gaining access to app data backups via the cloud service account, enable two-factor or other strong authentication mechanisms.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-20</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>Restricted Access to Legitimate App Stores</Threat>
        
        
        <ExploitExamples>Google Play Store seems blocked now from China. How can I update my Quora app? [^153]</ExploitExamples>
        
        
    </row>
    
    <row>
        <ThreatID>ECO-21</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>Distributing URLs Pointing to Malicious Applications</Threat>
        
        <ThreatOrigins>How to Protect Yourself From Malicious QR Codes [^149]</ThreatOrigins>
        
        <ExploitExamples>Find and Call app becomes first trojan to appear on iOS App Store [^154]</ExploitExamples>
        <ExploitExamples>An investigation of Chrysaor Malware on Android [^AndroidWebBlog-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent the installation of malicious applications, prohibit sideloading of apps and the use of unauthorized app stores</Countermeasure>
            <Countermeasure>To decrease the time to detection, use app threat intelligence data to identify malicious applications installed on devices.</Countermeasure>
            <Countermeasure>Use features such as Apple iOS Managed Apps, Android for Work, or Samsung KNOX Workspace that provide additional separation between personal apps and enterprise apps to mitigate the impact of malicious behaviors.</Countermeasure>
            <Countermeasure>Educate users about the risks of activating links in emails or SMS messages, and instead encourage users to identify the app where hosted by an official app store.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-22</ThreatID>
        <ThreatCategory>Mobile Application Store</ThreatCategory>
        <Threat>App Store Vetting Bypass</Threat>
        
        <ThreatOrigins>Researchers Find Methods for Bypassing Google's Bouncer Android Security [^151]</ThreatOrigins>
        
        <ExploitExamples>Dissecting the Android Bouncer [^155]</ExploitExamples>
        <ExploitExamples>Adventures in Bouncerland [^156]</ExploitExamples>
        <ExploitExamples>Malware designed to take over cameras and record audio enters Google Play [^99]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use app-vetting tools or services to determine that apps appear free of malicious behaviors or vulnerabilities prior to authorizing their use.</Countermeasure>
            <Countermeasure>To decrease the time to detection for malicious apps, use app threat intelligence services to detect malicious apps installed on devices</Countermeasure>
            <Countermeasure>Educate end users to scrutinize the permissions requested by apps, particularly if an updated version requests significantly different permissions than previous ones.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To decrease the time to detection for malicious apps on Android devices, use Android Verify Apps feature.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-23</ThreatID>
        <ThreatCategory>Mobile OS &amp; Vendor Infrastructure</ThreatCategory>
        <Threat>Distribution of malicious apps by a 3rd party store</Threat>
        
        <ThreatOrigins>Change to sideloading apps in iOS 9 is a security win [^89]</ThreatOrigins>
        <ThreatOrigins>Mobile Security: Threats and Countermeasures [^90]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the side-loading of apps, which may bypass security checks on the app.</Countermeasure>
            <Countermeasure>Deploy MAM or MDM solutions with policies that prohibit the installation of apps from 3rd party (unofficial) app stores.</Countermeasure>
            <Countermeasure>Ensure iOS devices are running the latest version of iOS, as iOS 9 introduces improvements to make it more difficult for users to inadvertently install non-Apple App Store apps (e.g. apps distributed using illicitly obtained enterprise certificates).</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Ensure iOS devices are running the latest version of iOS, as iOS 9 introduces improvements to make it more difficult for users to inadvertently install non-Apple App Store apps (e.g. apps distributed using illicitly obtained enterprise certificates).</Countermeasure>
            <Countermeasure>When the installation of apps from unofficial app stores (e.g., enterprise app stores) is necessary, use Android Verify Apps feature to identify potentially harmful apps.</Countermeasure>
            <Countermeasure>To protect against arbitrary installation of 3rd party apps, when the installation of apps from unofficial app stores (e.g., enterprise app stores) is necessary, disable the installation of 3rd party apps once installation is complete.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-3</ThreatID>
        <ThreatCategory>Mobile OS &amp; Vendor Infrastructure</ThreatCategory>
        <Threat>Insufficient Security Practices of Third-Party App Stores</Threat>
        
        <ThreatOrigins>Security Guidance for Critical Areas of Mobile Computing [^196]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Prohibit users from installing apps from unofficial and authorized app stores.</Countermeasure>
            <Countermeasure>Use app-vetting tools or services to determine that enterprise apps appear free from malicious behaviors or vulnerabilities prior to authorizing their use.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-4</ThreatID>
        <ThreatCategory>Mobile OS &amp; Vendor Infrastructure</ThreatCategory>
        <Threat>Remote App Installation Exploit</Threat>
        
        <ThreatOrigins>Symantec Internet Security Threat Report 2016 [^110]</ThreatOrigins>
        
        <ExploitExamples>How I Almost Won Pwn2Own via XSS [^200]</ExploitExamples>
        <ExploitExamples>How Anywhere Computing Just Killed Your Phone-Based Two-Factor Authentication [^201]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To prevent an attacker from gaining unauthorized access to remote installation functionality, enable two-factor or other strong authentication methods for user accounts on app stores.</Countermeasure>
            <Countermeasure>To detect unauthorized activity, including remote installation of apps, use features from Google or others to periodically analyze account activity for suspicious logins.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent an attacker from gaining unauthorized access to remote installation functionality, enable two-factor or other strong authentication methods for user accounts on app stores.</Countermeasure>
            <Countermeasure>To detect unauthorized activity, including remote installation of apps, use features from Google or others to periodically analyze account activity for suspicious logins.</Countermeasure>
            <Countermeasure>Deploy a combination of MDM, MAM, or container solutions and mobile devices that successfully enforce policies (e.g., whitelisting) that prevent unauthorized applications from being installed to managed areas of the device.</Countermeasure>
            <Countermeasure>To reduce the time to detection of malicious applications, use app threat intelligence services to identify malicious apps installed on devices.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-5</ThreatID>
        <ThreatCategory>Mobile OS &amp; Vendor Infrastructure</ThreatCategory>
        <Threat>Exploit Remote Management Services</Threat>
        
        
        <ExploitExamples>How Apple and Amazon Security Flaws Led To My Epic Hacking [^197]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To prevent an attacker from gaining unauthorized access to sensitive functionality (e.g., locating or wiping a device associated with the account), enable two-factor or other strong authentication methods for user accounts on Google, Apple, or other device management and tracking services.</Countermeasure>
            <Countermeasure>To detect unauthorized access to user accounts, use features from Google or others to periodically analyze account activity for suspicious logins.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent an attacker from gaining unauthorized access to sensitive functionality (e.g., locating or wiping a device associated with the account), enable two-factor or other strong authentication methods for user accounts on Google, Apple, or other device management and tracking services.</Countermeasure>
            <Countermeasure>To detect unauthorized access to user accounts, use features from Google or others to periodically analyze account activity for suspicious logins.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-6</ThreatID>
        <ThreatCategory>Mobile OS &amp; Vendor Infrastructure</ThreatCategory>
        <Threat>Malicious Application Delivered By Network Operator</Threat>
        
        
        <ExploitExamples>UAE Blackberry update was spyware [^198]</ExploitExamples>
        
        
    </row>
    
    <row>
        <ThreatID>ECO-7</ThreatID>
        <ThreatCategory>Mobile OS &amp; Vendor Infrastructure</ThreatCategory>
        <Threat>Zombie Applications</Threat>
        
        <ThreatOrigins>The State of the Mobile Ecosystem, Appthority Unveils New Security Research at Black Hat [^199]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the time to detection, use app threat intelligence services to detect malicious or vulnerable apps installed on devices.</Countermeasure>
            <Countermeasure>To reduce the risk of malicious behaviors or exploitation of vulnerable apps, deploy MDM or MAM solutions that successfully enforce policies restricting access to enterprise resources for devices running untrusted and unsupported versions of apps.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To detect malicious or vulnerable apps installed on Android devices, use the Android Verify Apps feature.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-8</ThreatID>
        <ThreatCategory>Mobile OS &amp; Vendor Infrastructure</ThreatCategory>
        <Threat>Varying Mobile DataDevice Regulations</Threat>
        
        <ThreatOrigins>The State of the Mobile Ecosystem, Appthority Unveils New Security Research at Black Hat [^199]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>As part of the app-vetting process, engage with app vendors to determine if data processed by the app may potentially be stored, temporarily or persisently, on systems located in areas that present unacceptible legal or privacy risks to enterprise data.</Countermeasure>
            <Countermeasure>Before authorizing the use of mobile devices in areas outside of corporate control, understand the legal and privacy risks to enterprise data.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>ECO-9</ThreatID>
        <ThreatCategory>Mobile OS &amp; Vendor Infrastructure</ThreatCategory>
        <Threat>Parallelized Brute Force</Threat>
        
        <ThreatOrigins>iOS Security: iOS 9.3 or later [^54]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the probability an attacker will successfully launch a brute-force attack against cloud-based cryptographic keys, periodically change authentication credentials, digital certificates, or any cryptographic secret used to derive keys that protect access to the account or data associated with it.</Countermeasure>
            <Countermeasure>As the strength of cryptographic mechanisms generally increases relative to that of any passwords or cryptographic secrets used, prefer or enforce the use of stronger passwords (increasing length, complexity, and randomness).</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the probability an attacker will successfully launch a brute-force attack against cloud-based cryptographic keys, periodically change authentication credentials, digital certificates, or any cryptographic secret used to derive keys that protect access to the account or data associated with it.</Countermeasure>
            <Countermeasure>As the strength of cryptographic mechanisms generally increases relative to that of any passwords or cryptographic secrets used, prefer or enforce the use of stronger passwords (increasing length, complexity, and randomness).</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>EMM-0</ThreatID>
        <ThreatCategory>Enterprise Mobility</ThreatCategory>
        <Threat>Improper Digital Certificate Validation</Threat>
        
        <ThreatOrigins>The Security of MDM Systems[^3]</ThreatOrigins>
        
        
        <CVEExamples>CVE-2014-5903</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>As part of the decision process when choosing to deploy an EMM solution that uses an on-device agent app, verify with the suite vendor that the agent app properly validates the digital certificate of the EMM server for any communication session.</Countermeasure>
            <Countermeasure>Consider choosing on-device agent apps that have certified against the most recent NIAP protection profile for MDM agents, as this provides a measure of assurance that the agent properly validates digital certificates.</Countermeasure>
            <Countermeasure>To mitigate the risk of a MiTM attack on remote agent-server communications (for on-premises deployments) due to improper certificate validation by the agent, use mobile OS-provided VPN features to first establish a secure connection to the enterprise network.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>EMM-1</ThreatID>
        <ThreatCategory>Enterprise Mobility</ThreatCategory>
        <Threat>Improper Tenant Segmentation</Threat>
        
        <ThreatOrigins>New VMSA-2014-0014 _ AirWatch by VMWare Product Update Addresses Information Disclosure Vulnerabilities [^190]</ThreatOrigins>
        
        <ExploitExamples>New VMSA-2014-0014 _ AirWatch by VMWare Product Update Addresses Information Disclosure Vulnerabilities [^190]</ExploitExamples>
        
        <CVEExamples>CVE-2014-8372</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To avoid this threat, deploy on-premises instances of EMM solutions when possible.</Countermeasure>
            <Countermeasure>To further reduce the potential impact of unauthorized access to account and device data, configure the EMM solution to capture and store the minimum amount of device, user, and activity data as required to meet your broader mobile device security goals.</Countermeasure>
            <Countermeasure>To further reduce the potential impact of unauthorized access to account and device data, dissociate or anonymize the data provided to the EMM service as much as possible (e.g., map enterprise or personal identities to aliases provisioned within the EMM solution).</Countermeasure>
            <Countermeasure>To reduce the time to detection of unauthorized access to EMM administrative accounts, configure the EMM solution to audit system access and administrative actions, and establish procedures to review recent activity for indications of unauthorized access.</Countermeasure>
            <Countermeasure>To reduce the potential for an attacker to activate sensitive EMM functionality, such as remote wiping of enrolled devices, configure the EMM solution to require authorization by multiple administrators before such actions will execute.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>EMM-10</ThreatID>
        <ThreatCategory>Enterprise Mobility</ThreatCategory>
        <Threat>Insecure Internally-developed App Installation</Threat>
        
        <ThreatOrigins>Mobile Top Ten 2016 [^9]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Prior to deployment, ensure internally developed apps are evaluated with rigor, such as by using app-vetting services to establish confidence they present minimal risk to the enterprise and device users.</Countermeasure>
            <Countermeasure>Consider the use of container solutions, such as Android for Work, that can prevent launching of managed apps when the device user is not authenticated to the work-centric container, thus minimizing the risk those apps present to the user outside of a work context.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>For device users with concerns about the security implications of a mandatory enterprise app during personal use of the device, restrict its permissions or if possible, temporarily disable it when operating the device in a personal context.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>EMM-2</ThreatID>
        <ThreatCategory>Enterprise Mobility</ThreatCategory>
        <Threat>Unauthorized Access to MDM Admin Console</Threat>
        
        <ThreatOrigins>The Security of MDM Systems[^3]</ThreatOrigins>
        
        <ExploitExamples>The Security of MDM Systems[^3]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Ensure that strong authentication methods are enabled for access to the administrative console.</Countermeasure>
            <Countermeasure>To prevent compromise of other administrator credentials from granting unauthorized access to EMM solutions, create distinct administrative credentials for EMM administrators.</Countermeasure>
            <Countermeasure>Configure EMM solutions to use multi-factor authentication mechanisms for remote EMM/MDM administration sessions.</Countermeasure>
            <Countermeasure>Audit administrative actions within EMM/MDM systems to enable detection of unauthorized access or actions</Countermeasure>
            <Countermeasure>Employ application vetting processes on prospective EMM/MDM solutions to reduce the risk attackers can gain unauthorized access to administrative functions.</Countermeasure>
            <Countermeasure>To prevent an attacker with unauthorized administrative access from activating sensitive features, such as remote full-wipe of devices, configure EMM solutions to with workflows that require authorization by multiple administrators prior to executing such actions.</Countermeasure>
            <Countermeasure>To limit the functions available to an attacker with unauthorized administrative access, divide administrative responsibilities across distinct administrator roles or accounts.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>EMM-3</ThreatID>
        <ThreatCategory>Enterprise Mobility</ThreatCategory>
        <Threat>MDM Impersonation</Threat>
        
        <ThreatOrigins>Mobile Device Mismanagement [^4]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>Design on-device agents to only accept MDM administrative commands during secure communication with a trusted EMM server (e.g. during a TLS session).</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Consider the use of EMM/MDM products that use digital signatures to allow the on-device agent to perform validation of the source and the integrity of device management messages.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>EMM-4</ThreatID>
        <ThreatCategory>Enterprise Mobility</ThreatCategory>
        <Threat>Improper Data Handling</Threat>
        
        <ThreatOrigins>Mobile Device Mismanagement [^4]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Employ application vetting mechanisms on prospective EMM/MDM solutions to reduce the risk that sensitive data processed by the EMM/MDM is handled in an insecure fashion.</Countermeasure>
            <Countermeasure>To reduce the impact of this threat, configure EMM solutions to capture the minimum set of user and device necessary to meet your broader mobile device security goals.</Countermeasure>
            <Countermeasure>To limit the impact of the theft of credentials supplied to an EMM solution, configure user authentication from mobile devices to enterprise services to use one-time passwords or other replay-resistant cryptographic tokens.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>EMM-5</ThreatID>
        <ThreatCategory>Enterprise Mobility</ThreatCategory>
        <Threat>Bypassing RootJailbreak Checks</Threat>
        
        <ThreatOrigins>All Your Root Checks Are Belong to Us: The Sad State of Root Detection [^5]</ThreatOrigins>
        
        
        <CVEExamples>CVE-2017-4895 [^AirWatch-1]</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To increase the potential that device root or jail-break is detected, deploy a variety of mechanisms capable of root or jail-break detection (e.g., on-device agents, apps that require successful boot attestation checks, manual inspection)</Countermeasure>
            <Countermeasure>To reduce the opportunity for an attacker to locally root or jail-break devices, educate users on the importance of physically securing their devices (e.g., locking it into a container) when not directly attended.</Countermeasure>
            <Countermeasure>To reduce the potential a given root or jail-break attack will succeed, ensure devices are configured with a strong device unlock code.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the potential for USB-based root or jail-break exploits, do not accept prompts to grant trust when connecting to untrusted computers or charging stations.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>EMM-6</ThreatID>
        <ThreatCategory>Enterprise Mobility</ThreatCategory>
        <Threat>Unauthorized Enrollment in MDM</Threat>
        
        <ThreatOrigins>Mobile Device Mismanagement [^4]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To increase the difficulty of such an attack, consider EMM/MDM solutions that support enrollment procedures that require users to expressly opt-in to management of their device, such as by issuing one-time enrollment tokens using an out-of-band channel, or requiring enrollment be performed in person</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>EMM-7</ThreatID>
        <ThreatCategory>Enterprise Mobility</ThreatCategory>
        <Threat>Breach of Privacy By MDM Administrator</Threat>
        
        <ThreatOrigins>Worker Fired for Disabling GPS App That Tracked Her 24 Hours a Day [Updated] [^6]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Ensure that the EMM/MDM console provides privacy controls to limit administrator access to privacy-sensitive information.</Countermeasure>
            <Countermeasure>Configure EMM/MDM solutions to audit administrative access and activity, particularly with respects to privacy-sensitive information.</Countermeasure>
            <Countermeasure>Configure EMM/MDM solutions to collect and audit only the minimal set of data necessary to meet the organization's broader mobile device security goals.</Countermeasure>
            <Countermeasure>Educate enterprise users about the privacy implications of enrolling their device into a EMM solution, such as clearly defining what data will be collected, and establishing procedures for resolving potential privacy violations.</Countermeasure>
            <Countermeasure>To prevent the potential for an attacker to gain access to highly privacy-sensitive information, such as call logs, configure EMM solutions with workflows that require multiple adminstrators to authorize access to such information prior to its release by the system.</Countermeasure>
            <Countermeasure>To further minimize the potential for EMM solutions to capture privacy-sensitive data, particularly for BYOD scenarios, deploy EMM solutions that discriminate the data collected when a device is being operated in a business context versus a personal context.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>EMM-8</ThreatID>
        <ThreatCategory>Enterprise Mobility</ThreatCategory>
        <Threat>Personal Data Deletion</Threat>
        
        <ThreatOrigins>Personal Data Security and the ''BYOD'' problem: Who is Truly at Risk? [^7]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Consider the use of EMM/MDM solutions that can be configured to require dual authorization (two administrative users) to trigger device wipe functions, or at a minimum, solutions for which wiping functions involve multiple steps to complete.</Countermeasure>
            <Countermeasure>To enable recovery of personal data wiped from a managed device, provide a mechanism for users to preserve personal data, such as encrypted back-ups to the native cloud service (e.g. iCloud Backup &amp; Storage).</Countermeasure>
            <Countermeasure>To limit the potential loss of personal data, encourage users of enrolled devices to use authorized mechanisms for the synchronization or transfer of personal data to external systems not subject to remote wipe by enterprise EMM solutions.</Countermeasure>
            <Countermeasure>Educate users regarding the risks to any personal data generated on an enrolled mobile device.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>EMM-9</ThreatID>
        <ThreatCategory>Enterprise Mobility</ThreatCategory>
        <Threat>Unauthorized Data Synchronization</Threat>
        
        <ThreatOrigins>Man in the Cloud: Threat, Impact, Resolution and the Bigger Picture [^8]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To avoid this threat, use a combination of EMM/MDM solutions and devices that successfully enforce a policy that prohibits devices from synchronizing enterprise data to unauthorized cloud services.</Countermeasure>
            <Countermeasure>To reduce the risk of a loss of confidentiality for enterprise data stored by an authorized cloud-based file storage or synchronization service, use a combination of EMM/MDM solutions and devices that successfully enforce a policy to encrypt any enterprise data synchronized to authorized but potentially unmanaged cloud services.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>GPS-0</ThreatID>
        <ThreatCategory>GPS</ThreatCategory>
        <Threat>GPS Jamming</Threat>
        
        <ThreatOrigins>A study of GPS jamming and anti-jamming, [^179]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To prevent loss of GPS signals from preventing location services from operating, select devices that attempts to a variety of location input sources, such as signal strength from cellular towers, Wi-Fi hotspots, and Bluetooth beacons. See __Ten Ways Your Smartphone Knows Where You Are__ [^40]</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent loss of GPS signals from preventing location services from operating, select devices that attempts to a variety of location input sources, such as signal strength from cellular towers, Wi-Fi hotspots, and Bluetooth beacons. See __Ten Ways Your Smartphone Knows Where You Are__ [^40]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>GPS-1</ThreatID>
        <ThreatCategory>GPS</ThreatCategory>
        <Threat>GPS Spoofing</Threat>
        
        <ThreatOrigins>On the requirements for successful GPS spoofing attacks [^1]</ThreatOrigins>
        
        <ExploitExamples>Assessing the spoofing threat: Development of a portable GPS civilian spoofer. [^2]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Original Equipment Manufacturer</Actor>
            <Countermeasure>Several countermeasures to be implemented in GPS receiver software have been presented in GPS Spoofing Countermeasures [^41]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-0</ThreatID>
        <ThreatCategory>Network Threats: Wi-Fi</ThreatCategory>
        <Threat>Rogue Access Points</Threat>
        
        <ThreatOrigins>Guidelines for Securing Wireless Local Area Networks (WLANs) (SP 800-153) [^16]</ThreatOrigins>
        
        <ExploitExamples>Darkhotel: A Sophisticated New Hacking Attack Targets High-Profile Hotel Guests [^17]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Avoid the use of untrusted and unencrypted Wi-Fi networks, particularly when needing to access sensitive services.</Countermeasure>
            <Countermeasure>When needing to connect to untrusted and unencrypted Wi-Fi networks, attempt to verify with a representative of the hosting organization (e.g., coffe shop employee) that the detected network is the correct one.</Countermeasure>
            <Countermeasure>To reduce the probability of connecting to rogue access points, use Wi-Fi hotspot services that associate access points with registered Wi-Fi provider, geolocation, and crowd-sourced reputation data to make assertions about the their apparent trustworthiness.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the probability of connecting to rogue access points, use Wi-Fi hotspot services that associate access points with registered Wi-Fi provider, geolocation, and crowd-sourced reputation data to make assertions about the their apparent trustworthiness.</Countermeasure>
            <Countermeasure>To avoid this threat, only allow mobile devices to connect to authorized Wi-Fi networks that use WPA2 encryption.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-1</ThreatID>
        <ThreatCategory>Network Threats: Wi-Fi</ThreatCategory>
        <Threat>Wi-Fi SSID Tracking</Threat>
        
        <ThreatOrigins>CAPEC-163: Wi-Fi SSID Tracking (Version 2.8) [^18]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent an attacker from persistently associating a tracked mobile device with the SSID of a known network (e.g., home or enterprise Wi-Fi), frequently change the SSID to a new and unrelated value.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the number of SSIDs available to an attacker to track a specific device, configure it to not attempt to automatically connect or notify the user of available Wi-Fi networks.</Countermeasure>
            <Countermeasure>To further reduce the number of SSIDs available to an attacker to track a specific device, configure network settings to 'forget' Wi-Fi networks, particularly infrequently used public Wi-Fi networks.</Countermeasure>
            <Countermeasure>To greatly reduce the number of messages available to an attacker to actively track a specific device, disable Wi-Fi whenever networked services are not in use.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-10</ThreatID>
        <ThreatCategory>Network Threats: Bluetooth</ThreatCategory>
        <Threat>Bluebugging</Threat>
        
        <ThreatOrigins>Guide to Bluetooth Security (SP 800-121) [^28]</ThreatOrigins>
        
        <ExploitExamples>Studying Bluetooth Malware Propagation: The BlueBag Project [^30]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the opportunity for an attacker to conduct this attack, disable Bluetooth on vulnerable (circa 2004) devices when that feature is not in use. [^J-Padgette-1]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-11</ThreatID>
        <ThreatCategory>Network Threats: Bluetooth</ThreatCategory>
        <Threat>Bluetooth Encryption Brute-Force</Threat>
        
        <ThreatOrigins>Guide to Bluetooth Security (SP 800-121) [^28]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To resist brute-force decryption attacks, use the maximum PIN length and encryption key sizes available on configurable Bluetooth devices.</Countermeasure>
            <Countermeasure>Restrict the use of older Bluetooth devices with a static or 4-digit PIN to very low-risk use cases.</Countermeasure>
            <Countermeasure>To prevent unauthorized disclosure or modification to data transmitted over a compromised Bluetooth session, use Bluetooth applications that provide strong over-the-top encryption to data prior to transmission over the Bluetooth interface.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Restrict the use of older Bluetooth devices with a static or 4-digit PIN to very low-risk use cases.</Countermeasure>
            <Countermeasure>To prevent unauthorized disclosure or modification to data transmitted over a compromised Bluetooth session, use Bluetooth applications that provide strong over-the-top encryption to data prior to transmission over the Bluetooth interface.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-12</ThreatID>
        <ThreatCategory>Network Threats: NFC</ThreatCategory>
        <Threat>NFC Relay MiTM</Threat>
        
        <ThreatOrigins>Implementation and Analysis of a Practical NFC Relay Attack Example [^31]</ThreatOrigins>
        
        <ExploitExamples>Demo: NFCGate - An NFC Relay Application for Android [Extended Abstract] [^32]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To prevent an attacker from launching a successful NFC relay attack, use mobile devices and NFC apps that require user authorization of the transaction prior to fulfilling requests communicated over NFC.</Countermeasure>
            <Countermeasure>To reduce the opportunity for this attack, disable NFC or associated apps when that feature is not in use.</Countermeasure>
            <Countermeasure>To reduce the number of potentially vulnerable applications running on the device, disable or uninstall any NFC apps that are no longer in use.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To prevent an attacker from launching a successful NFC relay attack, use mobile devices and NFC apps that require user authorization of the transaction prior to fulfilling requests communicated over NFC.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-13</ThreatID>
        <ThreatCategory>Network Threats: NFC</ThreatCategory>
        <Threat>Malicious NFC tags</Threat>
        
        <ThreatOrigins>NFC Threat Landscape [^33]</ThreatOrigins>
        
        <ExploitExamples>Exploring the NFC Attack Surface [^34]</ExploitExamples>
        
        <CVEExamples>CVE-2016-3761</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Use devices with NFC features and apps that explicitly request user authorization prior to following URLs or executing potentially harmful instructions on the device. See __QR Codes and NFC Chips: Preview-and-Authorize Should be Default__ [^39]</Countermeasure>
            <Countermeasure>To reduce the opportunity for this attack, disable NFC when that feature is not in use.</Countermeasure>
            <Countermeasure>To further reduce the opportunity for this attack, protect the device from malicious signals using a NFC-blocking case when that features is not in use.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-14</ThreatID>
        <ThreatCategory>Network Threats: Bluetooth</ThreatCategory>
        <Threat>Bluejacking</Threat>
        
        <ThreatOrigins>Guide to Bluetooth Security: Draft NIST SP 800-121rev2 [^J-Padgette-1]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce opportunity for this attack, disable Bluetooth when that feature is not in use.</Countermeasure>
            <Countermeasure>Do not accept data transfers, such as contact cards, transmitted over Bluetooth without confidence the message is legitimate.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-15</ThreatID>
        <ThreatCategory>Network Threats: Bluetooth</ThreatCategory>
        <Threat>Secure Simple Pairing Attacks</Threat>
        
        <ThreatOrigins>Guide to Bluetooth Security: Draft NIST SP 800-121rev2 [^J-Padgette-1]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce opportunity for this attack, disable Bluetooth when that feature is not in use.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use EMM/MDM solutions in combination with devices that successfully enforce a policy inhibit Just Works functionality or disable Bluetooth entirely, as appropriate.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-16</ThreatID>
        <ThreatCategory>Network Threats: Bluetooth</ThreatCategory>
        <Threat>Pairing Eavesdropping Attacks</Threat>
        
        <ThreatOrigins>Guide to Bluetooth Security: NIST SP 800-121rev2) [^J-Padgette-1]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To prevent this attack, when pairing devices, observe physical security, such as pairing devices in a secure location outside of which, the ability of an attacker to intercept Bluetooth messages is remote.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device user</Actor>
            <Countermeasure>Avoid the use of Bluetooth 2.0 or earlier devices, or those that only support Legacy Pairing.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-2</ThreatID>
        <ThreatCategory>Network Threats: Wi-Fi</ThreatCategory>
        <Threat>Eavesdropping on Poorly Encrypted Wi-Fi Networks</Threat>
        
        <ThreatOrigins>Guidelines for Securing Wireless Local Area Networks (WLANs) (SP 800-163) [^16]</ThreatOrigins>
        
        <ExploitExamples>Using the Fluhrer, Mantin, and Shamir Attack to Break WEP [^19]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the opportunity for this attack, configure mobile devices to not automatically connect to untrusted and unsecure networks.</Countermeasure>
            <Countermeasure>To mitigate eavesdropping over unencrypted Wi-Fi networks, use over-the-top encryption products that encrypt data prior to transmission off the device.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the probability of this attack, configure Wi-Fi networks to WPA2 in personal mode with a strong password (increased length, complexity, and randomness).</Countermeasure>
            <Countermeasure>To further reduce the probability of this attack, configure Wi-Fi networks with WPA2 in enterprise mode with digital certificates.</Countermeasure>
            <Countermeasure>To mitigate eavesdropping over unencrypted Wi-Fi networks, use over-the-top encryption products that encrypt data prior to transmission off the device.</Countermeasure>
            <Countermeasure>To mitigate eavesdropping over unencrypted Wi-Fi networks, use VPN solutions to establish an encrypted tunnel.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-3</ThreatID>
        <ThreatCategory>Network Threats: Wi-Fi</ThreatCategory>
        <Threat>Wi-Fi Hotspot Hijacking</Threat>
        
        <ThreatOrigins>Guidelines for Securing Wireless Local Area Networks (WLANs) (SP 800-163) [^16]</ThreatOrigins>
        
        <ExploitExamples>FCC Fines Marriott $600,000 for Jamming Hotel Wi-Fi [^21]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>When choosing to connect to an unencrypted and potentially spoofed Wi-Fi network, to reduce the probability of connecting to a malicious network, verify the network appears consistently geolocated with the host (e.g., on the premises), and if possible, verify with a representative that the intended Wi-Fi network is the one they host.</Countermeasure>
            <Countermeasure>To decrease the probability of connecting to a spoofed Wi-Fi network, configure devices to not automatically connect to unknown Wi-Fi networks, and to 'forget' public networks once they are no longer in use.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To greatly decrease the probability of this attack, only allow mobile devices to connect to authorized Wi-Fi networks that use WPA2 encryption with a strong pre-shared key (for personal mode).</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-4</ThreatID>
        <ThreatCategory>Network Threats: Wi-Fi</ThreatCategory>
        <Threat>Client MAC Address Tracking</Threat>
        
        <ThreatOrigins>IEEE 802 Privacy Threat Analysis [^22]</ThreatOrigins>
        
        <ExploitExamples>How Stores Use Your Phone's Wi-Fi to Track Your Shopping Habits [^23]</ExploitExamples>
        <ExploitExamples>Attention, Shoppers: Store is Tracking Your Cell [^24]</ExploitExamples>
        <ExploitExamples>FTC Goes After Firm for Tracking Shoppers' Cell Phones [^25]</ExploitExamples>
        <ExploitExamples>How Retailers Use Smartphones to Track Shoppers In the Store [^26]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device Owner</Actor>
            <Countermeasure>To increase the complexity of MAC address tracking, procure mobile devices with OS and hardware versions that support MAC address randomization. Starting in Android 6.0, randomized MAC addresses are used for Wi-Fi and Bluetooth scans. See __Android 6.0 Changes__. [^35] In iOS 8, Wi-Fi scanning behavior changed to use random, locally administrated MAC addresses. See User Privacy on iOS and OS X. [^36] Windows 10 and later verions support MAC address randomization. [^251]</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To increase the complexity of MAC address tracking, procure mobile devices with OS and hardware versions that support MAC address randomization. Starting in Android 6.0, randomized MAC addresses are used for Wi-Fi and Bluetooth scans. See __Android 6.0 Changes__. [^35] In iOS 8, Wi-Fi scanning behavior changed to use random, locally administrated MAC addresses. See User Privacy on iOS and OS X. [^36] Windows 10 and later verions support MAC address randomization. [^251]</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce traceable signals from a mobile device, place it airplane mode when wireless communication is not in use. In this mode, most devices will disconnect from any current Wi-Fi network, and not attempt to join any Wi-Fi networks until reenabled.</Countermeasure>
            <Countermeasure>To minimize traceable signals from a mobile device, power it off when not in use.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-5</ThreatID>
        <ThreatCategory>Network Threats: Wi-Fi</ThreatCategory>
        <Threat>Illegal RF Transmitters</Threat>
        
        <ThreatOrigins>GPS, Wi-Fi, and Cell Phone Jammers Frequently Asked Questions (FAQs) [^27]</ThreatOrigins>
        
        <ExploitExamples>FCC Fines Marriott $600,000 for Jamming Hotel Wi-Fi [^21]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Contingency planning for use of another communication band.</Countermeasure>
            <Countermeasure>To mitigate interference to on-premises communications, detect, locate, and deactivate the device causing interference to Wi-Fi communications.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Contingency planning for use of another communication band.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-6</ThreatID>
        <ThreatCategory>Network Threats: Bluetooth</ThreatCategory>
        <Threat>BluePrinting</Threat>
        
        <ThreatOrigins>Blueprinting [^29]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the opportunity for this attack, disable Bluetooth when that feature is not in use</Countermeasure>
            <Countermeasure>Operate Bluetooth on mobile devices in limited discoverable mode only as long as necessary to achieve desired pairing. See Specification of the Bluetooth System ver. 1.0B [^37]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-7</ThreatID>
        <ThreatCategory>Network Threats: Bluetooth</ThreatCategory>
        <Threat>BlueStumbling</Threat>
        
        <ThreatOrigins>War Nibbling: Bluetooth Insecurity [^O-Whitehouse-1]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce opportunity for this attack, disable Bluetooth when that feature is not in use</Countermeasure>
            <Countermeasure>To increase the complexity of this attack, consider the use of devices that support Bluetooth 4.0 and later. Bluetooth 4.0 allows for the address used by a device to change frequently, preventing persistent association of a given address with any user. See __Security, Bluetooth Smart (Low Energy)__ [^38]</Countermeasure>
            <Countermeasure>As pairing with an attacker-controlled device greatly increases the success of this attack, never authorize an unanticipated pairing request.</Countermeasure>
            <Countermeasure>As interception of pairing messages facilitates this attack, when pairing devices, observe physical security, such as pairing devices in a secure location outside of which, the ability of an attacker to intercept Bluetooth messages is remote.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To increase the complexity of this attack, consider the use of devices that support Bluetooth 4.0 and later. Bluetooth 4.0 allows for the address used by a device to change frequently, preventing persistent association of a given address with any user. See __Security, Bluetooth Smart (Low Energy)__ [^38]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-8</ThreatID>
        <ThreatCategory>Network Threats: Bluetooth</ThreatCategory>
        <Threat>Bluetooth DoS</Threat>
        
        <ThreatOrigins>Guide to Bluetooth Security (SP 800-121) [^28]</ThreatOrigins>
        
        <ExploitExamples>Studying Bluetooth Malware Propagation: The BlueBag Project [^30]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To limit opportunity for this threat, disable Bluetooth when that feature is not in use</Countermeasure>
            <Countermeasure>To prevent this threat from being realized, operate Bluetooth on devices in a secure location away from windows and doors, to which an attacker is unlikely to have physical access.</Countermeasure>
            <Countermeasure>To limit opporunity for this threat, protect devices with a case that blocks Bluetooth signals.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>LPN-9</ThreatID>
        <ThreatCategory>Network Threats: Bluetooth</ThreatCategory>
        <Threat>Bluesnarfing</Threat>
        
        <ThreatOrigins>Guide to Bluetooth Security (SP 800-121) [^28]</ThreatOrigins>
        
        <ExploitExamples>Studying Bluetooth Malware Propagation: The BlueBag Project [^30]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce opportunity for this attack on vulnerable devices, disable Bluetooth when that feature is not in use. Note: per NIST SP 800-121 Revision 1, some _older_ devices possessed a firmware vulnerability enabling this exploit.</Countermeasure>
            <Countermeasure>To reduce opportunity for this attack while Bluetooth is in use, operate the device in a secure location away from windows and doors, outside of which the probability an attacker can establish Bluetooth communication is remote.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PAY-0</ThreatID>
        <ThreatCategory>NFC-based</ThreatCategory>
        <Threat>NFC Payment Relay Attacks</Threat>
        
        <ThreatOrigins>iOS Security: iOS 9.3 and Later [^54]</ThreatOrigins>
        
        <ExploitExamples>Practical NFC peer-to-peer relay attack using mobile phones. [^11]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce opportunity for this attack, disable NFC when that feature is not in use.</Countermeasure>
            <Countermeasure>To avoid this attack, do not activate - or if no longer in use, deactivate - native mobile payment features, such as Apple Pay.</Countermeasure>
            <Countermeasure>To prevent this attack, ensure native payment services (e.g. Apple Pay) are configured to require user interaction to complete any contactless payment transaction.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PAY-1</ThreatID>
        <ThreatCategory>NFC-based</ThreatCategory>
        <Threat>Compromised Mobile Payment Terminal</Threat>
        
        <ThreatOrigins>Demystifying Point of Sale Malware and Attacks [^12]</ThreatOrigins>
        
        <ExploitExamples>Home Depot Hit By Same Malware as Target [^13]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To mitigate the potential losses incurred as a result of successful PoS attacks, configure mobile payment services to use accounts with limited funds available for purchases, such as pre-paid cards, maximum transaction amounts, or daily spending limits.</Countermeasure>
            <Countermeasure>To reduce the time to detection for compromised mobile payment information, perform regular review of statements for accounts for unauthorized transactions.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the time to detection for compromised mobile payment information, perform regular review of statements for accounts for unauthorized transactions.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Point-of-Sale Administrators</Actor>
            <Countermeasure>Follow security best practices regarding the protection of point-of-sale systems. See __Malware Targeting Point of Sale Systems__ [^42]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PAY-2</ThreatID>
        <ThreatCategory>NFC-based</ThreatCategory>
        <Threat>Unauthorized Mobile Payment Usage</Threat>
        
        <ThreatOrigins>The Weak Link in Apple Pay's Strong Chain is Bank Verification. Who's to Blame? [^14]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To reduce the time to detection for unauthorized enrollment in mobile payment services, use credit monitoring services to monitor credit card accounts for unauthorized changes.</Countermeasure>
            <Countermeasure>To prevent an attacker from bypassing holder-to-bank authentication to achieve card enrollment, configure payment services to use multi-factor authentication to enroll the user's card into a mobile payment service.</Countermeasure>
            <Countermeasure>As one method of enrollment into Apple Pay requires the attacker to provide the CVV, use strong physical security mechanisms to prevent unauthorized disclosure of the CVV. See iOS Security: iOS 9.3 and Later [^54]</Countermeasure>
            <Countermeasure>Follow general guidelines to protect credit card info: When conducting online transactions or accessing banking sites online, never access the URL from a link in an email or SMS/MMS; always type the URL directly into the location bar.</Countermeasure>
            <Countermeasure>Verify the browser indicates the session is secured with HTTPS before authenticating to a banking site or making online payments to vendors.</Countermeasure>
            <Countermeasure>To prevent attackers from obtaining authentication credentials or account details for payment systems, never access banking sites from public or untrusted systems, as these may have been infected with malware designed to steal authentication credentials or credit card information.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PAY-3</ThreatID>
        <ThreatCategory>Application-based</ThreatCategory>
        <Threat>Mobile Banking Application Vulnerabilities</Threat>
        
        <ThreatOrigins>The most dangerous code in the world: validating SSL certificates in non-browser software [^15]</ThreatOrigins>
        
        
        <CVEExamples>CVE-2015-1314</CVEExamples>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Carefully weigh the risks of using 3rd party mobile banking apps over more mature technologies, such as online transactions via web browsers, which may undergo more rigorous evaluation and benefit from more rapid deployment of security updates.</Countermeasure>
            <Countermeasure>Consider the use of pre-paid credit card services for payment apps to limit the potential financial harm an attacker can cause by placing charges against the linked account.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Carefully weigh the risks of using 3rd party mobile banking apps over more mature technologies, such as online transactions via web browsers, which may undergo more rigorous evaluation and benefit from more rapid deployment of security updates.</Countermeasure>
            <Countermeasure>Consider the use of pre-paid credit card services for payment apps to limit the potential financial harm an attacker can cause by placing charges against the linked account.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PAY-4</ThreatID>
        <ThreatCategory>In-app Purchases</ThreatCategory>
        <Threat>Accidental In-App Purchase</Threat>
        
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>If the use of enterprise apps that support in-app purchases is authorized, consider the use of EMM/MDM solutions that offer policy settings to require user authentication for each access to the native app store.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Configure settings for native app store purchases on the device so that each purchase requires successful authentication. Alternatively, only enable the bypassing of authentication for purchases during a limited period following a successful authentication to the app store (e.g. within 15 minutes).</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PAY-5</ThreatID>
        <ThreatCategory>Application-based</ThreatCategory>
        <Threat>Host Card Emulation Application Attacks</Threat>
        
        <ThreatOrigins>Secure Element Deployment &amp; Host Card Emulation v1.0 [^250]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Deploy EMM or containerization solutions to prohibit the use HCE-based apps on rooted or jail-broken devices.</Countermeasure>
            <Countermeasure>Use app-vetting services for HCE-based payment apps to determine if they are trustworthy prior to deployment.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Do not use HCE-based apps on rooted or jail-broken devices.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>Review additional methods for ensuring the confidentiality and integrity of mobile payments. Sources of additional guidance include the Smart Card Alliance [^251] and Mozido [^252]</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PHY-0</ThreatID>
        <ThreatCategory>Physical Access</ThreatCategory>
        <Threat>Device Loss or Theft</Threat>
        
        <ThreatOrigins>FAQ on Lost/Stolen Devices [^230]</ThreatOrigins>
        
        <ExploitExamples>Phone Theft in America: What really happens when your phone gets grabbed [^225]</ExploitExamples>
        <ExploitExamples>Smartphone thefts drop as kill switch usage grows [^226]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To prevent accidental loss of a device, pair it with another device, such as a smart watch, capable of alerting the user to separation from the device, or quickly triggering mechanisms to help the user locate it.</Countermeasure>
            <Countermeasure>To prevent theft of a device, closely attend the device at all times, and if leaving it unattended, apply strong physical security measures (e.g., lock it into a secure container).</Countermeasure>
            <Countermeasure>To mitigate the impact of a lost or stolen device in the possession of an attacker, use remote lock, activation lock, locate, or wipe capabilities as deemed appropriate based on the sensitivity of data stored on or capabilities of the device.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To mitigate the impact of a lost or stolen device in the possession of an attacker, use remote lock, activation lock, locate, or wipe capabilities as deemed appropriate based on the sensitivity of data stored on or capabilities of the device.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PHY-1</ThreatID>
        <ThreatCategory>Physical Access</ThreatCategory>
        <Threat>Malicious Charging Station</Threat>
        
        <ThreatOrigins>MACTANS: Injecting Malware Into iOS Devices Via Malicious Chargers [^46]</ThreatOrigins>
        
        <ExploitExamples>Researchers Show How to Hack an iPhone in 60 Seconds [^147]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Avoid use of public charging stations, which may house malicious chargers.</Countermeasure>
            <Countermeasure>Ensure Android USB debugging is disabled unless explicitly needed (e.g. by app developers).</Countermeasure>
            <Countermeasure>Do not accept any prompt to trust an untrusted or public USB charger.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PHY-2</ThreatID>
        <ThreatCategory>Physical Access</ThreatCategory>
        <Threat>Device Attack via PC Connection</Threat>
        
        <ThreatOrigins>Exploiting Smart-Phone USB Connectivity for Fun and Profit [^143]</ThreatOrigins>
        
        <ExploitExamples>New Malware Tries to Infect Android Devices Via USB Cable [^232]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>When charging a device, avoid connecting mobile devices directly to computers, and prefer the use of simple corded chargers obtained directly from the device vendor.</Countermeasure>
            <Countermeasure>To prevent some attacks over USB connectivity, disable USB debugging on Android devices when that feature is not in use.</Countermeasure>
            <Countermeasure>To reduce the opportunity for an attacker to directly connect a device to a malicious computer, use strong physical security when a device is being left directly unattended (e.g., lock it in a secure container).</Countermeasure>
            <Countermeasure>To prevent some attacks over USB connectivity, ensure the device has an unlock code set and is explicitly locked when being left directly unattended.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PHY-3</ThreatID>
        <ThreatCategory>Physical Access</ThreatCategory>
        <Threat>Unauthorized Access via Poor Lifecycle Management</Threat>
        
        <ThreatOrigins>BYOD &amp; Mobile Security [^146]</ThreatOrigins>
        
        <ExploitExamples>Who's Got Your Old Phone's Data? [^233]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use EMM or MDM solutions in combination with devices that successfully enforce data encryption and device lock policies (unlock code set, unlock code strength requirements, auto-locking enabled, and auto-wipe enabled) such that the recovery of data from an improperly retired device becomes highly improbable.</Countermeasure>
            <Countermeasure>Consider devices containing storage media that successfully implement secure-erase functions such that initiating a device wipe or factory reset is sufficient to render the recovery of any wiped data infeasible.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PHY-4</ThreatID>
        <ThreatCategory>Physical Access</ThreatCategory>
        <Threat>Unattended and Unlocked Device</Threat>
        
        <ThreatOrigins>Eight Ways to Keep Your Smartphone Safe [^231]</ThreatOrigins>
        
        <ExploitExamples>The Current State of Android Security [^234]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Enforce activation of the auto-lock feature of a mobile device with a maximum idle time that reduces the likelihood an attacker will gain physical access to the device in an unlocked state</Countermeasure>
            <Countermeasure>Activate auto-lock features based on loss of proximity to a trusted, paired device attended by the mobile device user, such as a smart watch</Countermeasure>
            <Countermeasure>Require additional user-to-app or user-to-service authentication for apps that provide access to sensitive data</Countermeasure>
            <Countermeasure>Educate end-users of the importance of locking their device if they are leaving it unattended in an area lacking strong physical security controls.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Enforce activation of the auto-lock feature of a mobile device with a maximum idle time that reduces the likelihood an attacker will gain physical access to the device in an unlocked state</Countermeasure>
            <Countermeasure>Activate auto-lock features based on loss of proximity to a trusted, paired device attended by the mobile device user, such as a smart watch</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PHY-5</ThreatID>
        <ThreatCategory>Physical Access</ThreatCategory>
        <Threat>Side-Channel Attack</Threat>
        
        <ThreatOrigins>ECDSA Key Extraction from Mobile Devices Via Nonintrusive Physical Side Channels</ThreatOrigins>
        
        <ExploitExamples>New Attack Steals Secret Crypto Keys from Android and iOS Phones [^164]</ExploitExamples>
        <ExploitExamples>Evolving differential power analysis targets SIM cards [^Rambus-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To increase the difficulty of this attack, use devices that implement mitigations in their cryptograhic functions against side-channel attacks, such as iOS 9.x and later devices.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To increase the difficulty of this attack, use devices that implement mitigations in their cryptograhic functions against side-channel attacks, such as iOS 9.x and later devices.</Countermeasure>
            <Countermeasure>Avoid the use of apps that may implement their own cryptographic functions without validation that appropriate mitigations against side-channel attacks have been implemented.</Countermeasure>
            <Countermeasure>Educate users to be mindful of their physical surroundings when using mobile devices, and to report the appearance of unexpected hardware components to IT security immediately.</Countermeasure>
            <Countermeasure>Educate users to not directly connect their mobile devices to untrusted systems or docking stations, and to maintain strong physical security for innocent components such as USB charging cables</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PHY-6</ThreatID>
        <ThreatCategory>Physical Access</ThreatCategory>
        <Threat>SIM Swap</Threat>
        
        <ThreatOrigins>A Biometrics-Based Solution to Combat SIM Swap Fraud [^235]</ThreatOrigins>
        
        <ExploitExamples>Sim-Swap Fraud Claims Another Mobile Banking Victim [^145]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>To increase the complexity of this attack, use devices that implement an integrated SIM or eSIM, which cannot be readily replaced with a malicious component.</Countermeasure>
            <Countermeasure>To reduce opportunity for this attack, when leaving the device directly unattended, use strong physical security controls (e.g., lock it into a secure container).</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To increase the complexity of this attack, use devices that implement an integrated SIM or eSIM, which cannot be readily replaced with a malicious component.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PHY-7</ThreatID>
        <ThreatCategory>Physical Access</ThreatCategory>
        <Threat>Battery Damage from Overheating</Threat>
        
        <ThreatOrigins>The science behind exploding phone batteries [^A-Chen-L-Goode-1]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Allow a device that is very warm or hot to the touch cool before charging it.</Countermeasure>
            <Countermeasure>Do not charge a device that is in a hot or heat-preserving environment, such as in direct sunlight, in a hot car, or under a blanket, as this will decrease the rate at which the device can dissipate heat.</Countermeasure>
            <Countermeasure>Avoid the use of quick-charge chargers, which will increase the heat produced during charging operations. and will increase risk of causing the battery to overheat.</Countermeasure>
            <Countermeasure>Charge a device using peripherals specifically designed for it, such as the charging unit and cable packaged with the device.</Countermeasure>
            <Countermeasure>To lessen the amount of heat produced by the CPU during charging operations, place the device into sleep mode or turn it completely off while charging</Countermeasure>
            <Countermeasure>To lessen the amount of heat produced by the battery during charging operations, charge the device from the USB port of a trusted computer.</Countermeasure>
            <Countermeasure>If a device becomes hot while charging while asleep or off, take it to a authorized service center so a defective battery can be replaced before causing damage to the device.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>PRI-0</ThreatID>
        <ThreatCategory>Behavior Tracking</ThreatCategory>
        <Threat>Tracking via Ultrasonic Beacons</Threat>
        
        <ThreatOrigins>Privacy Threats through Ultrasonic Side Channels on Mobile Devices [^Arp-1]</ThreatOrigins>
        
        <ExploitExamples>SilverPush Says It's Using Audio Beacons For An Unusual Approach To Cross-Device Ad Targeting [^Ha-1]</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Scrutinize apps that request access to the device microphone with an understanding that they may listen for and respond to ultrasonic beacons without user consent or knowledge.</Countermeasure>
            <Countermeasure>To help identify mobile apps that respond to ultrasonic beacons and better inform decisions regarding their use on any mobile device, consult resources such as the AddOns Detector website.</Countermeasure>
            <Countermeasure>To prevent apps that use ultrasonic beacons in a known and acceptible manner from potentially violating privacy when active outside their intended use (e.g., after leaving a store that uses beacons to offer targeted discounts), either block permission to the microphone, force-close, or disable the app when leaving its intended context.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To identify apps that may abuse access to the microphone to receive ultrasonic beacons and take action without user consent on managed devices, employ app-vetting services that can identify and notify users of potentially privacy-invasive behaviors.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile OS Developer</Actor>
            <Countermeasure>To prevent apps from generating inaudible signals to relay ultrasonic beacons to other devices without user knowledge or consent, expand existing device resource usage and/or permission models to include controls that prevent apps from abusing the ability listen to or generate audio at ultrasonic frequencies.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>OEM Manufacturer</Actor>
            <Countermeasure>To prevent apps from generating inaudible signals to relay ultrasonic beacons to other devices without user knowledge or consent, expand existing device resource usage and/or permission models to include controls that prevent apps from abusing the ability listen to or generate audio at ultrasonic frequencies.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-0</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Malicious Code in Open Source Software</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>To increase the complexity of this attack, prefer open source software libraries for which integrity-checking mechanisms are provided (e.g., strong cryptographic hashes of source files, digital signatures) so the authenticity of the open source library can be verified.</Countermeasure>
            <Countermeasure>To increase the complexity of this attack, when possible, obtain multiple instances of the same library as hosted by various sources (e.g., FTP mirrors) from which it should be available. Then evaluate all obtained versions for consistency (e.g., compare strong hashes). If any discrepancies are detected, contact the open source software developer.</Countermeasure>
            <Countermeasure>To detect compromise of the integrity checking mechanisms of a given source of open source libraries, particularly for security sensitive library functions, such as math or cryptographic libraries, contact the developer to verify the library is authentic.</Countermeasure>
            <Countermeasure>To reduce the probability this variety of attack goes undetected at runtime, implement defensive programming. Any call to untrusted code that can impact critical functionality of the system should include checks on the output for conditions that should always be true given an assumption the library behaves as expected.</Countermeasure>
            <Countermeasure>To protect open source library used by a product from modification, then if possible, package a verified authentic instance of the open source library and apply cryptographic protections (e.g., strong hashing, digital signatures) to the product to allow customers to verify the authenticity and integrity of all packaged components.</Countermeasure>
            <Countermeasure>To prevent distributing a software package that contains maliciously modified open source libraries, perform sufficient functional testing of the complete system to verify that it exhibits correct and consistent behavior.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Application Developer</Actor>
            <Countermeasure>To increase the complexity of this attack, prefer open source software libraries for which integrity-checking mechanisms are provided (e.g., strong cryptographic hashes of source files, digital signatures) so the authenticity of the open source library can be verified.</Countermeasure>
            <Countermeasure>To increase the complexity of this attack, when possible, obtain multiple instances of the same library as hosted by various sources (e.g., FTP mirrors) from which it should be available. Then evaluate all obtained versions for consistency (e.g., compare strong hashes). If any discrepancies are detected, contact the open source software developer.</Countermeasure>
            <Countermeasure>To detect compromise of the integrity checking mechanisms of a given source of open source libraries, particularly for security sensitive library functions, such as math or cryptographic libraries, contact the developer to verify the library is authentic.</Countermeasure>
            <Countermeasure>To reduce the probability this variety of attack goes undetected at runtime, implement defensive programming. Any call to untrusted code that can impact critical functionality of the system should include checks on the output for conditions that should always be true given an assumption the library behaves as expected.</Countermeasure>
            <Countermeasure>To reduce the probability this variety of attack goes undetected at runtime, implement defensive programming. Any call to untrusted code that can impact critical functionality of the system should include checks on the output for conditions that should always be true given an assumption the library behaves as expected.</Countermeasure>
            <Countermeasure>To protect open source library used by a product from modification, then if possible, package a verified authentic instance of the open source library and apply cryptographic protections (e.g., strong hashing, digital signatures) to the product to allow customers to verify the authenticity and integrity of all packaged components.</Countermeasure>
            <Countermeasure>To prevent distributing a software package that contains maliciously modified open source libraries, perform sufficient functional testing of the complete system to verify that it exhibits correct and consistent behavior.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To increase the complexity of this attack, prefer open source software libraries for which integrity-checking mechanisms are provided (e.g., strong cryptographic hashes of source files, digital signatures) so the authenticity of the open source library can be verified.</Countermeasure>
            <Countermeasure>To increase the complexity of this attack, when possible, obtain multiple instances of the same library as hosted by various sources (e.g., FTP mirrors) from which it should be available. Then evaluate all obtained versions for consistency (e.g., compare strong hashes). If any discrepancies are detected, contact the open source software developer.</Countermeasure>
            <Countermeasure>To detect compromise of the integrity checking mechanisms of a given source of open source libraries, particularly for security sensitive library functions, such as math or cryptographic libraries, contact the developer to verify the library is authentic.</Countermeasure>
            <Countermeasure>To protect open source library used by a product from modification, then if possible, package a verified authentic instance of the open source library and apply cryptographic protections (e.g., strong hashing, digital signatures) to the product to allow customers to verify the authenticity and integrity of all packaged components.</Countermeasure>
            <Countermeasure>To prevent distributing a software package that contains maliciously modified open source libraries, perform sufficient functional testing of the complete system to verify that it exhibits correct and consistent behavior.</Countermeasure>
            <Countermeasure>To prevent executing an application that relies upon a maliciously modified version of an open source library that is loaded dynamically at runtime (e.g., Dynamic Linked Library), perform verification of the library file prior to execution. This may involve validating hashes, verifying digital signatures, or other integrity protection or detection mechanisms on the host system.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-1</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Hardware or Firmware Component Interception</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Require firmware to be digitally signed by a trusted developer and the signature verified prior to the component being integrated into a larger system</Countermeasure>
            <Countermeasure>Employ software integrity verification checks on installed firmware, which can be validated against a known-good value (e.g. brute-force resistant cryptographic hash of firmware image) to detect any modification to firmware</Countermeasure>
            <Countermeasure>Obtain device measurements for comparison to normal ranges (e.g., temperature, timing, EM radiation, power consumption) to detect anomalous behavior.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-10</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Malicious Software in 3rd Party Bundling Process</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Test systems that contain newly integrated or updated software components to detect incorrect function or anomalous behavior prior to production use</Countermeasure>
            <Countermeasure>Obtain direct from the software developer a list of files changed by the installation or upgrade process, and if possible, strong cryptographic hashes for file updates that are configuration-independent and should produce known values</Countermeasure>
            <Countermeasure>Use fine-grained role-based access control mechanisms and user/service roles that reduce the potential that malicious installation or upgrade packages can introduce malware outside of files and directories allocated to the associated software</Countermeasure>
            <Countermeasure>Scan systems with newly integrated or updated software components for indicators of compromise prior to production use</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-11</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Vulnerable BIOS Installation</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>System maintenance processes for highly sensitive components such as BIOS should require dual authentication to perform, reducing the likelihood a single adversary can introduce malware</Countermeasure>
            <Countermeasure>Utilize systems with boot validation and attestation to verify that only genuine boot code is executed during system start-up, halting start-up if integrity verification for any component fails</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-12</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Corrupted Automated Installer</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Use fine-grained role-based access control mechanisms and user/service roles that reduce the potential that malicious installation or upgrade packages can introduce malware outside of files and directories allocated to the associated software</Countermeasure>
            <Countermeasure>Scan systems with newly integrated or updated software components for indicators of compromise prior to production use</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-13</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Hardware Design and Manufacture Compromise</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Employ software integrity verification checks on firmware, which can be validated against a known-good value (e.g. brute-force resistant cryptographic hash of firmware image) to detect any modification</Countermeasure>
            <Countermeasure>Obtain device measurements for comparison to normal ranges (e.g., temperature, timing, EM radiation, power consumption) to detect anomalous behavior in received components prior to production use.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-14</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Countefeit Hardware Component</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>SPC-15</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Unsecured or Malicious 3rd Party Components</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>SPC-16</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Obsolete Hardware Replacement</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>SPC-17</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Malicious Hardware or Firmware Inserted During Integration</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>SPC-18</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Subassembly Malware</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>SPC-19</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Component Substitution during Packaging or Distribution</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>SPC-2</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Malicious Critical Hardware Replacement</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Perform background checks on supply chain personnel as appropriate to the level of sensitivity of the component being distributed to detect placement or the potential for or actual manipulation by an adversary</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-20</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Component Substitution During Software Upgrade</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
    </row>
    
    <row>
        <ThreatID>SPC-21</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Low-level Backdoor</Threat>
        
        <ThreatOrigins>This is what a root debug backdoor in a Linux kernel looks like [^207]</ThreatOrigins>
        <ThreatOrigins>Chinese ARM vendor left developer backdoor in kernel for Android, other devices [^208]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprises</Actor>
            <Countermeasure>Obtain devices from a reputable vendor with a strong record of addressing security flaws in a timely fashion.</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Mobile Device User</Actor>
            <Countermeasure>Obtain devices from a reputable vendor with a strong record of addressing security flaws in a timely fashion.</Countermeasure>
            <Countermeasure>To reduce the opportunity for an attacker to exploit a patched vulnerability, ensure security updates are applied in a timely manner by configuring automated installation of or, at a minimum, automatic notification of the availability of security updates.</Countermeasure>
            <Countermeasure>To reduce the opportunity for attacks against various firmware components, disable device features when not in use (e.g., Bluetooth, Wi-Fi, NFC), and globally revoke access to unused device sensors or OS-provided functions (e.g., camera, microphone, location services).</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>To reduce the opportunity for an attacker to exploit a patched vulnerability, ensure security updates are applied in a timely manner by configuring automated installation of or, at a minimum, automatic notification of the availability of security updates.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-3</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Malicious Software Inserted into Software Processes or Tools</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        <ThreatOrigins>Symantec Internet Security Threat Report 2016 [^110]</ThreatOrigins>
        
        <ExploitExamples>XcodeGhost distributed a malicious version of Xcode (Apple''s developer tools) that automatically includes malicious code in compiled iOS apps.</ExploitExamples>
        
        
        <PossibleCountermeasures>
            <Actor>Mobile App Developer</Actor>
            <Countermeasure>App developers should ensure that development tools are obtained from a trusted source (e.g. directly from the vendor).</Countermeasure>
            
        </PossibleCountermeasures>
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Only software digitally signed by a trusted developer should be used, and the integrity of software development installation packages should be verified prior to installation</Countermeasure>
            <Countermeasure>Obtained software should be installed onto target operating systems in a known-good state (fresh install from verified installation media) in a test environment, which is then evaluated for any indicators of compromise prior to authorization of production use</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-4</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Malicious Logic Introduction</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Enforce strict access control and auditing for the configuration control system to enable effective auditing of any unauthorized changes to configuration settings.</Countermeasure>
            <Countermeasure>Use configuration management tools that can validate that current configuration settings meet policy requirements</Countermeasure>
            <Countermeasure>Test software and microelectronics to verify their functionality conforms to expected behavior and operates within normal tolerances (e.g. timing, temperature, power consumption, EM emissions) both after development and maintenance prior to placing or returning the component to the production environment</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-5</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Malware Embedded in Critical Component</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Obtain device measurements for comparison to normal ranges (e.g., temperature, timing, EM radiation, power consumption) to detect anomalous behavior.</Countermeasure>
            <Countermeasure>Test hardware to verify it functions as expected (e.g. known inputs yield correct outputs) prior to placing or replacing the device into the production environment</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-6</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Improperly Vetted or Untested Malicious Microelectronics</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Require that hardware components be tested for correct functionality and normal operation, and that the output of automated testing processes be digitally signed by the component that performed the test, and that the results are verified prior to acceptance of the tested component into the next stage of procurement, development, or deployment to reduce the likelihood an adversary can successfully introduce a malicious component that is not detected prior to use in production</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-7</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Hardware Component Substitution During Transfer</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Test systems that contain newly integrated or updated components to detect incorrect function or anomalous behavior prior to production use</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-8</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Firmware Component Substitution During Transfer</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Require firmware to be digitally signed by a trusted developer and the signature verified prior to the component being integrated into a larger system</Countermeasure>
            <Countermeasure>Employ software integrity verification checks on installed firmware, which can be validated against a known-good value (e.g. brute-force resistant cryptographic hash of firmware image) to detect any modification to firmware</Countermeasure>
            <Countermeasure>Obtain device measurements for comparison to normal ranges (e.g., temperature, timing, EM radiation, power consumption) to detect anomalous behavior.</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID>SPC-9</ThreatID>
        <ThreatCategory>Supply Chain</ThreatCategory>
        <Threat>Malicious Code in Custom Software</Threat>
        
        <ThreatOrigins>Supply Chain Attack Framework and Attack Patterns [^142]</ThreatOrigins>
        
        
        
        <PossibleCountermeasures>
            <Actor>Enterprise</Actor>
            <Countermeasure>Require test results to be digitally signed by both the testing component and a credential uniquely associated with the test operator to enforce non-repudiation</Countermeasure>
            <Countermeasure>Enforce strict access control and auditing for software testing systems to enable effective auditing of tests</Countermeasure>
            <Countermeasure>Design testing processes such that individuals responsible for testing do not know the destination of a tested component to prevent sabotage of a specific critical function, location, device, or organizational operation</Countermeasure>
            <Countermeasure>Design testing processes that use at least two independent testers/processes/tools and compare test results for consistency</Countermeasure>
            <Countermeasure>For mission-critical components, randomly test the same component multiple times using different testers/processes/tools and compare test results for consistency</Countermeasure>
            
        </PossibleCountermeasures>
        
    </row>
    
    <row>
        <ThreatID></ThreatID>
        <ThreatCategory></ThreatCategory>
        <Threat></Threat>
        
        
        
        
    </row>
    
    <row>
        <ThreatID></ThreatID>
        <ThreatCategory></ThreatCategory>
        <Threat></Threat>
        
        
        
        
    </row>
    
    <row>
        <ThreatID></ThreatID>
        <ThreatCategory></ThreatCategory>
        <Threat></Threat>
        
        
        
        
    </row>
    
    <row>
        <ThreatID></ThreatID>
        <ThreatCategory></ThreatCategory>
        <Threat></Threat>
        
        
        
        
    </row>
    
    <row>
        <ThreatID></ThreatID>
        <ThreatCategory></ThreatCategory>
        <Threat></Threat>
        
        
        
        
    </row>
    
    <row>
        <ThreatID></ThreatID>
        <ThreatCategory></ThreatCategory>
        <Threat></Threat>
        
        
        
        
    </row>
    
    <row>
        <ThreatID></ThreatID>
        <ThreatCategory></ThreatCategory>
        <Threat></Threat>
        
        
        
        
    </row>
    
</root>
